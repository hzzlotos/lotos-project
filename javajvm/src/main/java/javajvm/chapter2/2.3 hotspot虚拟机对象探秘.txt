2.3 hotspot虚拟机对象探秘
2.3.1 对象的创建
	创建对象（例如克隆，反序列化）通常仅仅是一个new关键字而已，而在虚拟机中，对象（仅限普通Java对象，不包括数组和class对象等）的创建。
	虚拟机遇到一条new指令，首先将去检查这个指令的参数是否能在常量池中定位到类符号引用并且检查这个符号引用代表的类是否已被加载，
解析和初始化过。如果没有则必须先执行相应的类加载过程（见书第七章）。
	在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确认（如何确认在2.3.2节中介绍），
为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。
*假设Java堆中的内存是绝对规整的，所有用过的内存都存放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，那所分配
内存就仅仅是把那个指针想空闲空间那边挪动一段与对象大小相等的距离，这种分配方式成为“指针碰撞”。
*如果Java堆中的内存并不是规整的，已使用的内存和空闲的内存相互交错，那就没有办法简单的进行指针碰撞了，虚拟机就必须维护一个列表，
记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”。
	其中选择用哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。因此，在使用
Serial，ParNew等带Compact过程的收集器时，系统采用的分配算法是指针碰撞，而使用CMS这种基于Mark-Sweep算法的收集器时，通常采用空闲
列表。除了如何划分可用空间之外，还有另外一个并发情况下堆内不是线程安全的，可能出现正在给A分配内存，指针还没来及修改，而B又同时
使用了原来的指针分配内存的情况。解决该问题有两种方案：
*一种是对分配空间的动作进行同步处理----实际上虚拟机采用cas配上失败重试的方式保证跟新操作的原子性；
*另一种是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（TLAB）。
哪个线程需要分配内存，就在哪个线程的TLAB上分配，只有TLAB用完并分配新的TLAB时，才需要同步锁定。
	其中虚拟机是否使用TLAB，可以通过 -XX:+/-UseTLAB参数来设定。内存分配完成后，虚拟机需要将分配到内存空间都初始化为零值（不包括
对象头），如果使用TLAB，这一工作也可以以前至TLAB分配时进行。这一步操作保证了对象实例字段在Java代码中可以不赋初始值就可以直接使用，
程序能访问到这些字段的数据类型所对应的零值。
	接下来，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息，对象的哈希码，对象的GC分代年龄
等信息。这些信息存放在对象的对象头之中。根据虚拟机当前的运行状态的不用，如是否启用偏向锁等，对象投会有不同的设置方式。
	在上面工作都完成之后，从虚拟机的角度来看，一个新的对象已经产生了，但从Java程序的角度来看，对象创建才刚刚开始，<init>方法还
没有执行，所有的字段都为零。所有一般来说（由字节码中是否跟随invokespecial指令所决定），执行new指令之后会接着执行<init>方法，把
对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生。

2.3.2 对象的内存布局
	在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（header），实例数据（Instance Data）和对齐填充（Padding）。
	HotSpot虚拟机的对象投包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码（HashCode），GC分代年龄，锁状态标志，
线程持有的锁，偏向线程ID，偏向时间戳等，这部分数据的长度在32位和64位虚拟机（未开启压缩知指针）中分别为32bit和64bit，官方称它为
“Mark Word”。对象需要存储的运行时数据很多，其实已经超过32位，64位bitmap结构所能记录的限度，但是对象投信息是与对象自身定义的数据
无关的额外存储成本，Mark Word被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，根据对象的状态复用自己的存储空间。
例如在32位的HotSpot虚拟机中，如果对象处于未被锁定状态下，那么Mark Word的32bit空间中的25bit用于存储对象哈希码，4bit用于存储对象
分代年龄，2bit用于存储锁标志位，1bit固定为0，而在其他状态（轻量级锁定，重量级锁定，GC标记，可偏向）下对象的存储内容如下表：

	对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。并不是所有的虚拟机
实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身，这点将在2.3.3节讨论。另外，如果对象是
一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是
从数据的元数据中却无法确定数组的大小。
	接下来的实力数据部分是对象真正存储的有效信息，也是在程序代码中所定义的课中类型的字段内容。无论是从父类继承下来的，还是在子类
中定义的，都需要记录起来。这部分的存储顺序会受到虚拟机分配策略参数和字段在Java源码中定义顺序的影响。hotSpot虚拟机默认的分配策略为
longs/doubles，ints，shorts/chars，bytes/booleans，oops（Ordinary Object Pointers），从分配策略中可以看出，相同宽度的字段
总是被分配到一起。在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。如果CompactFields参数值为true（默认为true），
那么子类之中较窄的变量也可能会插入到父类变量的空隙之中。
	第三部分对齐填充并不是必然存在的，也没有特别的含义，他仅仅起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址
必须是8字节的整数倍，即对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数，因此当对象实例数据部分没有对齐时，就需要通过
对齐填充来补全。

2.3.3 对象的访问定位
	Java程序需要通过栈上的reference数据来操作堆上的具体对象。由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，
并没有定义这个引用应该通过何种方式去定位，访问堆中的对象的具体位置，所以对象访问方式也是取决于虚拟机实现而定的。目前流行的两种是
句柄和直接指针。
	如果使用句柄访问的话，那么Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象
实例数据与数据类型各自的具体地址信息。
	如果使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址。
（在对象实例数据中包含了对象类型数据的指针）。
	这两种对象访问方式各有优势，使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动时只会修改句柄中的
实例数据指针，而reference本身不需要修改。而是用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象
的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。本书主要讨论的是Sun HotSpot，使用的是第二种方式进行
对象访问的，但从整个软件开发的范围来看，句柄访问的情况也十分常见。

