	第二章介绍了Java内存运行时区域的各个部分，其中程序计数器，虚拟机栈和本地方法栈三个区域随线程而生，随线程而灭：栈中的栈帧随着
方法的进入和退出有条不紊地执行这出栈和入栈操作。每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的（尽管在运行期会由JIT
编译器进行一些优化，但在本章基于概念模型的讨论中，大体上可以认为是编译期可知的），因此这几个区域的内存分配和回收都具备确定性，在
这几个区域内就不需要过多考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟随着回收了。而Java堆和方法区则不一样了，一个接口
中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间时才能知道会创建哪些对象，
这本份内存的分配和回收都是动态的，垃圾收集器所关注的是这部分内存，后续讨论的“内存”分配与回收也仅指这一部分内存。
	
3.2 对象已死吗
	在堆里面存放这Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还“存活”着，哪些
已经“死去”（即不可能再被任何途径使用的对象）。

3.2.1 引用计数算法
	很多教科书判断对象存活的算法是：给对象中添加一个引用计数器，每当有地方引用，计数器+1；失效时计数器-1；任何时刻计数器为0的对象
就是不可能再被使用的。客观说引用计数算法实现简单，判定效率也很高，大部分情况下是不错的算法，而它很难解决对象之间相互循环引用的问题。
由E3_2_1_ReferenceCountingGC的gc.log可以清楚看到，GC日志中包含（XXXK->XXK），意味着虚拟机并没有因为两个对象相互引用就不回收他们，
侧面说明虚拟机不是通过引用算法来判断对象存活的。

3.2.2可达性分析算法
	这套算法的基本思路就是通过一系列成为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个
对象到GC Roots没有任何引用链相连（用图论的话来说，就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。
在Java语言中，可作为GC Roots的对象包括下面几种：
*虚拟机栈中引用的对象。
*方法区中类静态属性引用的对象。
*方法区中常量引用的对象。
*本地方法栈中JNI（即一般说的Native方法）引用的对象。

3.2.3 再谈引用
	无论什么算法判定对象是否存活都与“引用”有关。引用的概念现在被分为了“强引用”，“软引用”，“弱引用”，“虚引用”4中，这4种引用强度
一次逐渐减弱。
*强引用就是指在程序代码之中普遍存在的，类似“Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被
引用的对象。
*软引用是用来描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围
之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。现有SoftReference类来实现软引用。
*弱引用也是用来描述非必需对象的，但它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作
时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。现有WeakReference类来实现弱引用。
*虚引用也成为幽灵引用或幻影引用，他是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过
虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时受到一个系统通知。现有PhantomReference
类来实现虚引用。

3.2.4 生存还是死亡
	即使在可达性算法中不可达的对象也并非“非死不可”，这时候他们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少经历两次标记过程：
如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并进行一次筛选，筛选条件是此对象是否有必要执行
finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。
	如果这个对象被判定为有必要执行finalize()放啊，那么这个对象将会放置在一个叫做F-Queue队列之中，并在稍后由一个由虚拟机自动建立
的，低优先级的Finalizer线程去执行它。这里所谓的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是如果一个
对象在finalize()方法中执行缓慢，或者发生了死循环，将很可能会导致F-Queue队列中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。
finalize()方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功
挽救自己---只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或者对象的成员变量，那在第二次
标记时它将被移除出“即将回收”集合；如果对象这时还未逃脱，那基本上它就真的被回收了。从E3_2_4_FinalizeEscapeGC可以看出事例中的
finalize()方法确实被GC收集器触发过，并收集前成功太拖了。另一个值得注意的地方是finalize()方法只会被系统自动调用一次，如果面临
下一次回收，它的finalize()方法不会再次执行。
	需要特别说明的是，不要使用finalize()方法来挽救对象；相反，大家应该尽量避免使用它，因为它不是C/C++中的析构函数，而是Java刚
诞生时，为了使C/C++程序员更容易接受所做出的一个妥协。运行代价高昂，不确定性大，无法保证各个对象的调用顺序。建议忘记这个方法。

3.2.5 回收方法区
	很多人认为方法区（或者HotSpot虚拟机中的永久代）是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机在方法区实现垃圾
收集，而且在方法区中进行垃圾收集的“性价比”较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%～95%的空间，
而永久代的垃圾收集效率远低于此。永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量和回收Java堆中的对象非常类似。
以常量池中字面量的回收为例，加入一个字符串“abc”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做“abc”的，换句话说，
就是没有任何String对象引用常量池中的“adc”常量，也没有其他地方引用了这个字面量，如果这时候发生了内存回收，而且必要的话，这个“adc”
常量就会被系统清理出常量池。常量池中的其他类（接口），方法，字段的符号引用也与此类似。判定一个常量是否是“废弃常量”比较简单，而要
判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足以下三个条件才能算是“无用的类”：
*该类所有的实例都已经被回收,也就是Java堆中不存在该类的任何实例。
*加载该类的ClassLoader已经被回收。
*该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。
虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样，不使用了就必然会回收。是否对类进行回收，
HotSpot虚拟机提供了-Xnoclassgc参数进行控制，还可以使用-verbose:class以及-XX:+TraceClassLoading，-XX:+TraceClassUnLoading查看
类加载和卸载信息，其中-verbose:class和-XX:TraceClassLoading可以在Product版的虚拟机中使用，-XX:+TraceClassUnLoading参数需要
FastBebug版的虚拟机支持。
	在大量使用反射，动态代理，CGLib等ByteCode框架，动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的
的功能，以保证永久代不会溢出。

3.3 垃圾收集算法
	由于垃圾收集算法的实现设计大量的程序细节，而且个个平台的虚拟机操作内存的方法又各不相同，因此本节不过多讨论算法的实现，只是介绍
几种算法的思想及其发展过程。

3.3.1 标记-清除算法
	最基础的收集算法是“标记-清除”算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成
后统一回收所有被标记的对象，它的标记过程其实在前一节讲述对象标记判定时已经介绍过了。之所有说它是最基础的收集算法，是因为后续的收集
算法都是基于这种思路并对其不足进行改进而得到的。它的主要不足有两个：一个是效率问题，标记和清除两个过程效率都不太高；另一个是空间
问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存
而不得不提前触发另一次垃圾收集动作。

3.3.2 复制算法
	为了解决效率问题，一种称为“复制”的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这块的内存
用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存
分配时就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是算法的代价是将内存缩小为了原来
的一半，未免太高了。
	现在的商业虚拟机都采用这种手机算法来回收新生代，IBM公司的专门研究表明，新生代的对象98%是“朝生夕死”，所以并不需要按照1：1比例
来划分内存空间，而是将内存分为了一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和
Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和
Survivor的大小比例是8：1，也就是每次新生代中可用内存空间为整个新生代容量的90%（80+10）。只有10%的内存会被“浪费”。当然98%的对象
回收只是一般场景下的数据，我们没办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（这里指老年
代）进行分配担保。
	内存的分配担保就好比我们去银行借款，信誉好在98%情况下都能按时偿还，于是银行可能会默认我们下一次也按时偿还，只需要有一个担保人
能保证如果我不能还款时，可以从他的账户扣钱，那银行就认为没有风险了。内存的分配担保也一样，如果另外一块Survivor空间没有足够空间
存放上一次新生代收集下来的存活对象时，这些对象将直接通过分配担保机制进入老年代。关于对新生代进行分配担保的内容，稍后详细讲解。

3.3.3 标记-整理算法
	复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键是，如果不想浪费50%的空间，就需要有额外的空间进行
分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。老年代使用“标记-整理”算法，标记
过程仍然和“标记-清除”算法一样，但后续不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的
内存。

3.3.4 分代收集算法
	当前商业虚拟机的垃圾收集都采用“分代收集”算法，这种算法并没有什么新的思想，只是根据对象存活周期的不同将内存划分为几块，一般是
把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有
少量存活，就是用复制算法，之需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高，没有额外空间对它进行分配
担保，就必须使用“标记”系列算法来进行回收。

3.4 HotSpot算法实现

3.4.1 枚举根节点
	从可达性分析中从GC Roots节点找引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文
（例如栈帧中的本地变量表）中，现在很多应用仅仅方法区就有数百兆，如果逐个检查引用是不切实际的。另外，可达性分析对执行时间的敏感还
体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行---这里“一致性”的意思是指在整个分析期间整个执行系统看起来就像
被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，若该点不满足的话分析结果准确性就无法保证。这点是导致GC
进行时不需停顿所有Java执行线程（Sun将这件事称之为“Stop The World”）的其中一个重要原因，即使是在号称（几乎）不会发生停顿的CMS收集
器中，枚举根节点时也是必须要停顿的。由于目前的主流Java虚拟机使用的都是准确式GC，所以当执行系统停顿下来后，并不需要一个不漏地检查
完所有执行上下文和全局的引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组称为OopMap的数据
结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的
位置记录下栈和寄存器中哪些位置是引用。这样GC在扫描时就可以直接得知这些消息了。在String.hashCode()方法的本地代码中可以看到call
指令有OopMap记录，指明了EBX寄存器和栈中偏移量为16的内存区域中各有一个普通对象指针的引用，有效范围为从call指令开始直到hlt指令为止。

3.4.2 安全点
	在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说OopMap
内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外空间，这样GC的空间成本将会变得非常高。实际上，HotSpot
也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置称为安全点（Safepoint），即程序执行时
并非在所有地方都能停顿下来开始GC，只有在达到安全点时才能暂停。Safepoint的选定即不能太少以至于让GC等待时间太长，也不能过于频繁以
至于过分增大运行时的负荷。所以安全点的选定基本是以程序“是否具有让程序长时间执行的特征”为标准进行选定的---因为每条指令执行的时间
都非常短暂，程序不太可能因为指令流长度太长这个原因而过长的时间运行，“长时间执行”的最明显特征就是指令序列复用，例如方法调用，循环
跳转，异常跳转等，所以具有这些功能的指令才会产生Safepoint。对于Safepoint，另一个需要考虑的问题是如何在GC发生时让所有线程（这里
不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。
	这里有两种方案可供选择：
*抢先式中断和主动式中断，其中抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果有线程中断的地点
不在安全点上，就恢复线程，让它“跑”到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停呈现从而响应GC事件。
*而主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断
标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。如3_4_2图,test指令即为HotSpot生成
的轮询指令，当需要暂停线程时，虚拟机把0x160100内存页设置为不可读，线程执行到test指令时就会产生一个自陷异常信号，在预先注册的异常
处理器中暂停线程实现等待，这样一条汇编指令便完成安全点轮询和触发线程中断。

3.4.3 安全区域
	使用Safepoint似乎已经完美地解决了如何进入GC的问题，但实际情况却并不一定。Safepoint机制保证了程序执行时，在不太长的时间内就
会遇到可进入GC的Safepoint。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配CPU时间，典型的例子就是线程处于Sleep状态或者
Blocked状态，这时候线程无法响应JVM的中断请求，“走”到安全的地方去中断挂起，JVM也显然不太可能等待线程重新被分配CPU时间。对于这种
情况，就需要安全区域（Safe Region）来解决。安全区域是指在一段代码片段之中，引用关系不会发生变化。在这个区域中的任意地方开始GC都
是安全的，我们也可以把Safe Region看做是被扩展了的Safepoint。在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，
那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经
完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。

3.5 垃圾收集器
	如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。Java虚拟机规范中对垃圾收集器应该如何实现并没有任何
规定，因此不同的厂商，不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并一般都会提供参数供用户根据自己的应用特点和要求组合
出各个年代所使用的收集器。这里讨论的收集器基于JDK1.7Update14之后的HotSpot虚拟机（此版本中正式提供了商用G1收集器）。
	图3_5展示了7种作用于不同分代的收集器， 如果两个收集器之间存在连线，就说明他们可以搭配使用。虚拟机所处区域则表示它是属于新生代
收集器还是老年代收集器。重点分析CMS和G1这两个相对复杂的收集器。首先明确一个观点：没有所谓的最好的收集器！

3.5.1 Serial收集器
	Serial收集器是最基本，发展史最悠久的收集器，这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个
CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有工作线程直到收集结束。“Stop The World”这个
名字也许听起来很酷，但这项工作实际上是由虚拟机在后台自动发起和自动完成的，在用户不可见的情况下把用户正常工作的线程全部停掉，这对
很多应用来说是难以接受的。试想一下计算机每运行一小时就要暂停相应5分钟！
	对于“Stop The World”带给用户的不良体验，虚拟机的设计者们表示完全理解，但也表示非常委屈：“你妈妈在给你打扫房间的时候，肯定也
会让你老老实实地在椅子上或者房间外带着，如果她一边打扫，你一边乱人纸屑，这房间还能打扫完？”这确实是一个合情合理的矛盾，虽然垃圾
收集这项工作听起来和打扫房间属于一个性质的，但实际上肯定还要比打扫房间负责的多！从JDK1.3开始，一直到现在最新的JDK1.7，HotSpot
虚拟机开发团队为消除或者减少工作线程因内存回收而导致停顿的努力一直进行着，从Serial收集器到Parallel收集器，再到Concurrent Mark
Sweep（CMS）乃至GC收集器的最前沿成功Garbage First（G1）收集器，我们看到了一个个越来越优秀（也越来越复杂）的收集器的出现，用户
线程的停顿时间在不断缩短，但是仍然没有办法去完全消除。寻找更优秀的垃圾收集器的工作仍在继续！比起其他收集器的地方：简单而高效（与
其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集
效率。在用户的桌面应用场景中，分配给虚拟机管理的内存一般不会很大，收集几十兆甚至一两百兆的新生代，停顿时间完全可以控制在几十毫秒
最多一百多毫秒以内，只要不是频繁发生，这点停顿可以接受的。所以Serial收集器对于运行在Client模式下的虚拟机来说是一个很好的选择。

3.5.2 ParNew收集器
	ParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数，
收集算法，Stop The World，对象分配规则，回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。ParNew
收集器除了多线程收集之外，其他与Serial收集器相比并没有太多创新之处，但它却是许多运行在Server模式下的虚拟机中首选的新生代收集器，
其中有一个与性能无关但很重要的原因是，除了Serial收集器外，目前只有它能与CMS收集器配合工作。ParNew收集器在单CPU的环境中绝对不会
比Serial收集器效果更好。甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分百保证超越Serial收集
器。当然，随着可以使用CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。默认开启的收集线程数与CPU的数量相同，在CPU非常
多的环境下，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。

3.5.3 Parallel Scavenge收集器
	Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器。Parallel Scavenge收集器目标
则是达到一个可控制的吞吐量。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间/（运行用户
代码时间+垃圾收集时间）；例如虚拟机总共运行100分钟，其中垃圾收集花费1分钟，那么吞吐量就是99%。停顿时间越短就越适合需要与用户交互
的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多
交互的任务。但Parallel Scavenge收集器与CMS收集器无法配合。
	Parallel Scavenge收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的-XX:MaxGCPauseMillis参数以及直接
设置吞吐量大小的-XX:GCTimeRatio参数。MaxGCPauseMillis参数允许的值是一个大于0的毫秒数，收集器将尽可能地保证内存回收花费的时间不
超过设定值。不过大家不要认为如果把这个参数值设置稍小点就能使得系统的垃圾收集速度变得更快，GC停顿时间缩短是以牺牲吞吐量和新生代
空间来换取的：系统把新生代调小一些，收集300MB新生代肯定比收集500MB快些，这也直接导致垃圾收集发生更频繁一些，原来10秒收集一次，
每秒停顿100毫秒，现在变成5秒收集一次，每次停顿70毫秒。停顿时间的确下降，但吞吐量也降下来了。GCTimeRatio参数的值应当是一个大于0
且小于100的整数，也就是垃圾收集时间占总时间的比率，相当于是吞吐量的倒数。如果把此参数设置为19，那允许的最大的GC时间占总时间的5%
（即1/(1+19)），默认值为99，就是允许最大1%（即1/(1+99)）的垃圾收集时间。由于与吞吐量关系密切，Parallel Scavenge收集器也被称之
为“吞吐量优先”收集器。除上述两个参数之外，Parallel Scavenge收集器还有一个参数-XX:UseAdptiveSizePolicy值得关注。这是一个开关参
数，当这个参数打开之后，就不需要手工指定新生代的大小（-Xmn），Eden与Survivor区的比例（-XX:SurvivorRatio），晋升老年代对象年龄
（-XX:PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿
时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略。如果读者对于收集器运作原理不太了解，手工优化存在困难的时候，使用Parallel
 Scavenge收集器配合自适应调节策略，把内存管理的调优任务交给虚拟机去完成将是一个不错的选择。只需要把基本的内存数据设置好（如-Xmx
设置最大堆），然后使用MaxGCPauseMillis参数（更关注最大停顿时间）或GCTimeRatio（更关注吞吐量）参数给虚拟机设立一个优化目标，那
具体细节参数的调节工作就由虚拟机完成了。自适应策略是Parallel Scavenge收集器的特性。

3.5.4 Serial Old收集器
	Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用“标记-整理”算法。这个收集器的主要意义也是在于给Client
模式下的虚拟机使用。如果在Server模式下，那么它主要还有两大用途：以是在jdk1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，
另一种用途就是作为CMS收集器的后备预案，在并发收集发生时使用。

3.5.5 Parallel Old收集器
	Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。这个收集器是在JDK1.6中才开始提供，此前新生
代的Parallel Scavenge收集器一直处于尴尬状态，因为如果新生代选择Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择。
由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，
由于单线程老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这个组合的吞吐量甚至还不ParNew加
CMS组合给力。直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了名副其实的应用组合，在注重吞吐量以及CPU资源敏感的场合，可以
考虑Parallel Scavenge加Parallel Old收集器。

3.5.6 CMS收集器
	CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S
系统的服务端上，这类应用尤其重视服务的相应的速度，希望系统停顿时间最短，以给用户带来较好的体验，CMS收集器就非常符合这类应用的需求。
从名字上就可以看出CMS收集器是基于“标记-清除”算法实现的。运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤，包括：
*初始标记（CMS initial mark）
*并发标记（CMS Concurrent mark）
*重新标记（CMS remark）
*并发清除（CMS Concurrent sweep）
其中，初始标记，重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发
标记就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的
标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。由于整个过程中耗时最长的并发标记和并发清除过程
收集器线程都可以和用户线程一起工作，所以从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。CMS优点：并发收集，
低停顿，被称之为并发低停顿收集器。但也有三个明显缺点：
*1. CMS收集器对CPU资源非常敏感。其实，面向并发设计的程序都对CPu资源比较敏感。在并发阶段，虽不会导致用户线程停顿，但会因为占用一
部分线程（或说CPU资源）而导致应用程序变慢，总吞吐量会降低。CMS默认启动的回收线程数是（CPU数量+3）/4，也就是CPU在4个以上的时，并
发收回时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，CMS对用户程序的影响就可以变
得很大，如果本来CPU负载就比较大，还要分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了50%，其实也让人无
法接受。为了应付这种情况，虚拟机提供了一种称为“增量式并发收集器”（i-CMS）的CMS收集器变种，目前已被声明为“deprecated”不再提倡使用。
*2. CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。
由于CMS并发清理阶段用户线程还在运行着,伴随程序运行自然就还会有新的垃圾不断产生,这一部分垃圾出现在标记过程之后,CMS无法在当次收集
中处理掉他们,只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。
也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到
老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。在JDK1.5的默认设置下，CMS收集器当老年代使用了
68%的空间后就被激活，这是一个偏保守的设置，如果在应用中老年代增长不是太快，可以适当调高参数-XX:CMSInitiatingOccupancyFraction
的值来提高触发百分比，以便降低内存回收次数从而获取更好的性能，在JDK1.6中，CMS收集器的启动阀值已经提升至92%。要是CMS运行期间预留
的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这是虚拟机将启动后被预案：临时启用Serial Old收集器来重新进行
老年代的垃圾收集，这样停顿时间就很长了，所以说参数-XX:CMSInitiatingOccupancyFraction设置得太高很容易导致大量“Concurrent Mode
 Failure”失败，性能反而降低。
*3. 还有最后一个缺点就是CMS是一款基于“标记-清除”算法实现的收集器，意味着收集结束时会有大量空间碎片产生。碎片过多时，将会给大对象
分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，从而不得不出发一次Full GC。为了
解决这个问题，CMS收集器提供了一个-XX:+UseCMSCompactAtFullCollection开关参数（默认就是开启的），用于在CMS收集器顶不住要进行Full
 GC时开启内存碎片的合并整理过程，内存整理的过程是无法并发的，空间碎片问题没有了，但停顿时间不得不变长。虚拟机设计者还提供了另外
一个参数-XX:CMSFullBeforeCompaction，这个参数是用于设置执行多少次不压缩的Full GC后，跟着来一次带压缩的（默认值为0，表示每次进入
Full GC时都进行碎片整理）。

3.5.7 G1收集器
	G1（Garbage-First）是一款面向服务端应用的垃圾收集器，HotSpot期望未来可以替换掉CMS收集器。如下特点：
*1. 并行与并发：G1能充分利用多CPU，多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop The World停顿时间，部分其他收
集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。
*2. 空间整合：与CMS的“标记-清理”算法不同，G1从整体来看是基于“标记-整理”算法实现的收集器，从局部上来看是基于“复制”算法实现的，但
如论如何，这两种算法都意味着G1运行期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象
时不会因为无法找到连续内存空间而提前出发下一次GC。
*2. 可预测的停顿：这是G1相对于CMS的另一大优势，减低停顿时间是G1和CMS共同的关注点，但G1除了追求体低停顿外，还能建立可预测的停顿
时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的
垃圾收集器的特征了。
在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代。而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大
差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，
他们都是一部分Region（不需要连续）的集合。
	G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划的避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面
的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价
值最大的Region。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。
	G1把内存“化整为零”的思路，理解起来似乎很容易，但其中的实现具体细节却远远没有想象中那样简单，以一个细节为例：将Java堆分为多个
Region后，垃圾收集是否就真的能以Region为单位进行了？听起来顺理成章，仔细一想，Region不可能是孤立的。一个对象分配在某个Region中，
它并非只能被本Region中的其他对象引用，而是可以与整个Java堆任意的对象发生引用关系。那在做可达性判定确定对象是否存活的时候，还是需
要扫描整个Java堆来确保准确性。在以前的分代收集中，新生代中对象回收也面临同样问题，如果回收新生代时不得不同时扫描老年代的话，那么
Minor GC效率可能下降不少。
	在G1收集器中，Region之间的对象引用以及其他收集器中的新生代和老年代之间的对象引用，虚拟机都是使用Remembered Set来避免全堆扫
描的。G1中每个Region都有一个与之对应的Remembered Set，虚拟机发现程序在对Reference类型的数据进行写操作时，会产生一个Write Barrier
暂时中断写操作，检查Reference引用的对象是否处于不同的Region之中（在分代的例子中就是检查是否老年代中的对象引用了新生代中的对象），
如果是，便通过CardTable把相关引用信息记录到被引用对象所属的Region的Remembered Set之中。当进行内存回收时，在GC根节点的枚举范围中
加入Remembered Set即可保证不对全堆扫描也不会有遗漏。如果不计算维护Remembered Set的操作，G1收集器的运作大致可划分为以下几个步骤：
*初始标记（Initial Marking）
*并发标记（Concurrent Marking）
*最终标记（Final Marking）
*筛选回收（Live Data Counting and Evacuation）
初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，
能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活
的对象，这阶段耗时较长，但可与用户程序并发执行。而最终标记阶段则是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那
一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到
Remembered Set中，这阶段需要停顿线程，但是可并行执行回收线程。最后在筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据
用户所期望的GC停顿时间来制定回收计划，从Sun公司透露出来的信息来看，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收
一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。
	由于目前G1成熟版本发布时间较短，G1收集器几乎可以说还没有经过实际应用的考验，仅仅通过简单的Java代码写个Microbenchmark程序来
创建，移除Java对象，再用-XX:+PrintGCDetails等参数来查看GC日志是很难做到准确衡量其性能的。建议是虽然G1与CMS都立足与低停顿时间，
但ParNew+CMS仍可以作为首选方案。
------------------------------------------------------------------------------------------------------------------------
*串行收集器：
1.DefNew：是使用-XX:+UseSerialGC（新生代，老年代都使用串行回收收集器）。
*并行收集器：
1.ParNew：是使用-XX:+UseParNewGC（新生代使用并行收集器，老年代使用串行回收收集器）或者-XX:+UseConcMarkSweepGC(新生代使用并行
收集器，老年代使用CMS)。
2.PSYoungGen：是使用-XX:+UseParallelOldGC（新生代，老年代都使用并行回收收集器）或者-XX:+UseParallelGC（新生代使用并行回收收集
器，老年代使用串行收集器）。
3.garbage-first heap：是使用-XX:+UseG1GC（G1收集器）
------------------------------------------------------------------------------------------------------------------------

3.5.8 理解GC日志
	每一种收集器的日志形式都是由他们自身的实现所决定的，换而言之，每个收集器的日志格式都可以不一样。但虚拟机设计者为了方便用户阅
读，将各个收集器的日志都维持一定的共性，例如以下两段典型的GC日志：（图3_5_8_1）
	最前面的数字“33.125：”与“100.667：”代表了GC发生的时间，这个数字的含义是从Java虚拟机启动以来经过的描述。GC日志开头的“[GC”和
“[Full GC”说明了这次垃圾收集的停顿类型，而不是用来区分新生代GC还是老年代GC的。如果有“Full”，说明这次GC是发生了Stop The World的，
如（图3_5_8_2）这段新生代收集器ParNew的日志也会出现“[Full GC”（这一边是因为出现了分配担保失败之类的问题，所以才导致STW）。如果
是调用System.gc()方法所触发的收集，那么在这里将显示“[Full GC(System)”。
	接下来的“[DefNew”，“[Tenured”，“[Perm”表示GC发生的区域，这里显示的区域名称与使用的GC收集器是密切相关的，例如上面样例所使用
的Serial收集器中的新生代名为“Default New Generation”，所以显示的是“[DefNew”。如果是ParNew收集器，新生代名称就会变成“[ParNew”，
意为“Parallel New Generation”。如果采用Parallel Scavenge收集器，那它配套的新生代称为“PSYoungGen”，老年代和永久代同理，名称也
是由收集器决定的。
	后面方括号内部的“3324K->152K(3712K)”含义是“GC前该内存区域已使用量->GC后该内存区域已使用容量（该内存区域总容量）”。而在方括
号之外的“3324K->152K(11904K)”表示“GC前Java堆已使用容量->GC后Java堆已使用容量（Java堆总容量）”。
	再往后，“0.0025925secs”表示该内存区域GC所占用的时间，单位是秒。有的收集器会给出更具体的时间数据，如“[Times: user=0.01 sys
=0.00,real=0.02secs]”，这里面的user，sys和real与Linux的time命令所输出的时间含义一致，分别代表用户态消耗的CPU时间，内核态消耗的
CPU时间和操作从开始到结束所经过的墙钟时间（Wall Clock Time）。CPU时间与墙钟时间的区别是，墙钟时间包括各种非运算的等待耗时，例如
等待磁盘I/O，等待线程阻塞，而CPU时间不包括这些耗时，但当系统有多CPU或者多核的话，多线程操作会叠加这些CPU时间，所以读者看见user或
sys时间超过real时间是完全正常的。

3.5.9 垃圾收集器参数总结（如图）

3.6 内存分配和回收策略
	Java技术体系中所提倡的自动内存管理最终归结为自动化解决了两个问题：给对象自动分配内存以及回收分配给对象的内存。
	对象内存分配，大方向就是在堆上分配，对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少
数情况下也可能会直接分配在老年代中，分配的规则并不是百分之百固定的，其细节取决于当前是使用的是哪一种垃圾收集器组合，还有虚拟机中
与内存相关的参数的设置。下面的验证代码是在Client模式虚拟机运行，没有手工指定收集器组合，换句话说就是使用的Serial/Serial Old收集
器（ParNew/Serial Old收集器组合的规则也基本一致）下的内存分配和回收的策略。其他的读者可以自己试。

3.6.1 对象优先在Eden分配（复制算法中使用Eden）
	大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。虚拟机提供了-XX:PrintGCDetails
这个收集器日志参数，告诉虚拟机在发生垃圾收集行为时打印内存回收日志，并且在进程退出的时候输出当前的内存各区域分配情况。在实际应用
中，内存回收日志一般是打印到文件后通过日志工具进行分析。
	代码E3_6_1_TestAllocation中，尝试分配3个2MB大小和1个4MB大小的对象，在运行时通过-Xms20M，-Xmx20M，Xmn10M这三个参数限制了
Java堆大小为20MB，不再可扩展，其中10MB分配给老年代。 -XX:SurvivorRatio=8决定了新生代中Eden区与一个Survivor区的空间比例是8：1，
从输出的结果可以清晰看到“eden space 8192K,   from space 1024K,   to space 1024K”的信息，新生代总可用空间为9216KB（Eden区+1个
Survivor区的总容量）。执行分配allocation4对象的语句时会发生一次Minor GC，这次GC的结果是新生代6651KB变为148KB，而总内存占用量则
几乎没有减少（因为allocation1，allocation2，allocation3三个对象都是存活的，虚拟机几乎没有找到可回收的对象）。这次GC发生的原因是
给allocation4分配内存的时候，发现Eden已经被占用了6MB，剩余空间已不足以分配allocation4所需的4MB内存，因此发生Minor GC。GC期间虚
拟机又发现已有的3个2MB大小的对象全部无法放入Survivor空间（Survivor空间只有1MB大小），所以只好通过分配担保机制提前转移到老年代去。
这次GC结束后，4MB的allocation4对象顺利分配在Eden中，因此程序执行完的结果是Eden占用4MB（被allocation4占用），Survivor空闲，老年
代被占用6MB（被allocation1，allocation2，allocation3占用）。通过GC日志可以证实这一点。
*新生代GC（Minor GC）：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也
比较快。
*老年代GC（Major GC/Full GC）：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge
收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。

3.6.2 大对象直接进入老年代
	所谓的大对象是指需要大量连续空间的Java对象，最典型的大对象就是那种很长的字符串以及数组。大对象对虚拟机的内存分配来说就是a一个
坏消息（比遇到一个大对象更加坏的消息就是遇到一群“朝生夕灭”的“短命大对象”，写程序一定要避免），经常出现大对象容易导致内存还有不少
空间时就提前触发垃圾收集以获取足够的连续空间来“安置”它们。虚拟机提供了一个-XX:PretenureSizeThreshold参数，令大于这个设置值的对象
直接在老年代分配。这样做的目的是避免在Eden区及两个Survivor区之间发生大量的内存复制（新生代采用复制算法收集内存）。代码
E3_6_2_TestPretenureSizeThreshold中，可以看见Eden几乎没有被使用，而老年代直接被使用了4MB，就是因为PretenureSizeThreshold参数
被设置为3MB（3145728），因此超过3MB的对象都被直接来老年代分配。
*注意：PretenureSizeThreshold参数只对Serial和ParNew两款收集器有效，Parallel Scavenge收集器不识别此参数，如需要使用该参数的场
合，可以考虑ParNew+CMS。

3.6.3 长期存活的对象将进入老年代
	虚拟机给每个对象定义了一个对象年龄计数器。如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被
移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每“熬过”一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（默认
为15岁），那么就会被晋升到老年代中。对象晋升老年代的年龄阀值可以通过参数-XX:MaxTenuringThreshold设置。对于E3_6_3_TestTenuringThreshold
可以分别设置MaxTenuringThreshold为1与15来测试，allocation1需要256KB内存，Survivor空间可以容纳。所以当MaxTenuringThreshold为1
时，allocation1对象在第二次GC时进入了老年代，Survivor变为了0KB；而当MaxTenuringThreshold为15时，第二次GC发生后allocation1对象
还存在于Survivor空间之中。

3.6.4 动态对象年龄判定
	为了能更好的适应不同程序的内存状况，虚拟机不是永远要求对象的年龄必须达到了MaxTenuringThreshold才能晋升老年代，如果在Survivor
空间中相同年龄所有对象大小的总和大于Survivor空间的一半，那么年纪大于或等于该年龄的对象就可以直接进入老年代，无需等到MaxTenuringThreshold
中要求的年龄。

3.6.5 空间分配担保
	在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以
确保是安全的。如果不成功，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的
连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者
HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。这里的风险是指，前面提到过新生代使用复制收集算法，但为了
内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况（最极端的情况就是内存回收后
新生代中所有对象都存活），就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。与生活中的贷款担保类似，老年代要进行
这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的。所以只好取
之前一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。
	取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保
失败。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。虽然担保失败时所执行的流程消耗最大，但大部分
情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。在JDK 6 Update 24之后，HandlePromotionFailure不再会影响
到虚拟机的空间分配担保策略。
