14.3 线程状态
java线程的六个状态:
1. New(新生)
2. Runnable(可运行)
3. Blocked(被阻塞)
4. Waiting(等待)
5. Timed waiting(计时等待)
6. Terminated(被终止)

1. 新生: 当new操作符创建一个新线程时, 如new Thread(r),该线程还没有开始运行.意味着状态为新生状态,程序还未开始运行线程中的代码.

2. 可运行线程: 一旦调用start方法,线程处于runnable状态.一个可运行的线程可能正在运行也可能没有运行,这取决于操作系统给线程提供运行的时间.
	一旦线程开始运行,不必保持运行.事实上运行中的线程被中断,目的的为了让其他线程获得运行的机会.线程调度的细节依赖于操作系统提供的服务.
 抢占式调度系统给每一个可运行线程一个时间片来执行任务.当时间片用完,操作系统剥夺该线程的运行权,并给另一个线程运行机会.

3. 被阻塞线程和等待线程: 当线程处于被阻塞或等待状态时, 线程暂不活动.线程不运行任何代码且消耗最少资源.直到线程调度器重新激活该线程.
细节取决于该线程是怎样到达非活动状态的.
* 当一个线程试图获得一个内部的对象锁,而该锁被其他线程持有,则该线程进入阻塞阶段.当所有其他线程释放该锁,并且线程调度器允许该线程持有它时,
该线程将变成非阻塞状态.
* 当线程等待另一个线程通知调度器一个条件时,该线程进入等待状态.在调用Object.wait()方法或者Thread.join()方法时,或者是等待
java.util.concurrent库中的Lock或Condition时,就会出现这种情况. 实际上被阻塞状态与等待状态是有很大不同的.
* 有几个方法有一个超时参数.调用它们导致线程进入计时等待(timed waiting)状态.这一状态将一直保持到超时期满或接收到适当的通知.
带有超时参数的方法有Thread.sleep()与Object.wait(),Thread.join(),Lock.tryLock以及Condition.await()的计时版

(1)当一个线程被阻塞或等待时(或终止时),另一个线程被调度为运行状态.
(2)当一个线程被重新激活(例如,因为超时期满或成功的获得一个锁),调度器检查其是否具有比当前运行线程更高的优先级.如果是这样,
调度器从当前运行线程中挑选一个,剥夺其运行权,选择一个新的线程运行.

4. 被终止的线程 : 线程被终止的原因只有如下两种
* 因为run方法正常退出而自然死亡.
* 因为一个没有捕获的异常终止了run方法而意外死亡.
特别的是可以调用线程stop()方法杀死一个线程.该方法抛出ThreadDeath错误对象,由此杀死线程. 但该方法已过时.

14.4 线程属性
1. 线程优先级: 每一个线程都有一个优先级.默认情况下,一个线程继承其父线程的优先级.设置为MIN_PRIORITY(定义为1)与MAX_PRIORITY(定义为10)之间的任何值.NORM_PRIORITY定义为5.
每当线程调度有机会调度新线程时,首先选择具有较高优先级的线程.建议不要将程序构建为功能的正确性依赖于优先级.java线程的优先级被映射到宿主机平台的优先级上,
在windows上有7个优先级;而在linux中则优先级被忽略,所有优先级全部相同.





总结锁与条件的关键之处:
*锁用来保护代码片段,任何时刻只能有一个线程执行被保护的代码.
*锁可以管理试图进入被保护代码段的线程.
*锁可以拥有一个或多个相关的条件对象.
*每个条件对象管理那些已经进入被保护的代码段但还不能运行的线程.


同步阻塞是不推荐的--->即synchronized不推荐使用
方法中的变量是线程私有的,可以做线程判断的依据

14.7 线程安全的集合
在java.util.concurrent包中提供了映象,有序集,队列的高效实现
ConcurrentHashMap,ConcurrentSkipListMap,ConcurrentSkipListSet与ConcurrentLInkedQueue.
他们的size方法不必在常量时间内操作,确定集合当前的大小通常需要遍历.
迭代器不一定能反映出他们被构造之后的所有修改,但肯定不会将一个值返回两次,也不会抛出ConcurrentModificationException.

List<E> synchArrayList = Collections.synchronizedList(new ArrayList<E>());
Map<K,V> synchHashMap = Collections.synchronizedMap(new HashMap<K,V>());
输出的集合的方法使用了锁加以保护,提供了线程的安全访问.

14.9执行器
newCachedThreadPool                 必要时创建新线程,空闲线程会被保留60秒
newFixedThreadPool                  该池包含固定数量的线程;空闲线程会一直保留
newSingleThreadExecutor             只有一个线程的"池",该线程顺序执行每一个提交的任务
newScheduledThreadPool              用于预定执行而构建的固定线程池,替代java.util.Timer
newSingleThreadScheduledExecutor    用于预定执行而构建的单线程"池"

14.9.1 线程池
总结:
1.调用Executors类中静态的方法newCachedThreadPool或newFixedThreadPool
2.调用submit提交Runnable或Callnable对象
3.如果需要取消一个任务,或如果提交Callable对象,那就要保存好返回的Future对象
4.当不再提交任何任务时,调用shutdown/shutdownNow

















