1.1 并发简史
	之所以在计算机中加入操作系统来实现多程序同时执行，主要是基于以下原因：
*资源利用率。在等待同时运行另一个程序，大大提高了资源利用率。
*公平性。不同用户和程序对计算机上的资源有着同等的使用权。
*便利性。通常来说在计算多个任务时，应编写多个程序，每个程序执行一个任务并在必要时相互通讯，这比只编写一个程序来计算所有任务更容易
实现。
	串行编程模型的优势在于其直观性与简单性。每次只做一件事情，做完之后再做另一件。但早上起来烧水，烤面包，看报纸可以一起进行，因
为茶壶和面包机的生产商都很清楚用户通常会采用异步方式来使用他们的产品，因此这些机器在完成之后都会发出提示音。
	线程允许在同一个进程中同时存在多个程序控制流。线程会共享进程范围内的资源，但每个线程都有各自的程序计数器，栈，以及局部变量等。
线程还提供了一种直观的分解模式来充分利用多处理器系统中的硬件并行性，而在同一个程序中多个线程也可以被同时调度到多个CPU上运行。线程
还提供了一种直观的分解模式来充分利用多处理器系统中的硬件并行性，而在同一个程序中的多个线程也可以被同时调度到多个CPU上运行。
	如果没有明确的协同机制，那么线程将彼此独立的执行。由于同一个进程中的所有线程都将共享进程的内存地址空间，因此这些线程都能访问
相同的变量并在同一个堆上分配对象，这需要实现一种比在进程间共享数据粒度更细的数据共享机制。如果没有明确的同步机制来协同对共享数据
的访问，那么当一个线程正在使用某个变量时，另一个线程可能同时访问这个变量，这将造成不可预测的结果。

1.2 线程的优势
	如果使用得到，线程可以有效的降低程序的开发和维护成本，同时提升复杂应用程序的性能。线程能够将大部分的异步工作流转换成串行工作
流，因此能更好的模拟人类的工作方式和交互方式。此外线程还可以降低代码的复杂度，是代码更容易编写，阅读和维护。

1.2.1 发挥多处理器的强大能力
	由于基本的调度单位是线程，因此如果在程序中只有一个线程，那么最多同时只能在一个处理器上运行。在双处理器系统上，单线程的程序只
能使用一半的CPU资源；另一方面，多线程程序可以同时在多个处理器上执行。如果设计正确，多线程程序可以通过提高处理器资源的利用率来提升
系统吞吐率。使用多线程也有助于在单处理器系统上获得更好吞吐率。

1.2.2 建模的简单性
	只需要执行一种类型的任务，在时间管理方面比执行多种类型的任务要简单。如果需要完成多种类型的任务，那么管理不同任务间的优先级和
执行时间，并且在任务之间进行切换，这将带来额外的开销。
	对于程序来说也是如此：如果程序中只包含一种类型的任务，那么比包含多种不同类型任务的程序要易于编写，错误更少，也更容易测试。如
果为模型中每种类型的任务都分配一个专门的线程，那么可以形成一种串行执行的假象，并将程序的执行逻辑与调度机制的细节。交易执行的操作。
异步I/O以及资源等待问题分离开来。通过使用线程，可以将复杂并且异步的工作流进一步分解为一组简单并且同步的工作流，每个工作流在一个
单独的线程中运行，并在特定的同步位置进行交互。
	我们可以通过一些现有的框架来实现上述目标，例如Servlet与RMI。框架负责一些细节问题，例如请求管理，线程创建，负载均衡，并在正确
的时刻将请求分发给正确的应用程序组件。编写Servlet的开发人员不需要了解有多少请求在同一时刻要被处理，也不需要了解套接字的输入流或
输出流是否被阻塞。当调用Servlet的service方法来响应Web请求时，可以以同步方式来处理这个请求，就好象它是一个单线程程序。这种方式可
以简化组件的开发，并缩短掌握这种框架的学习时间。

1.2.3 异步事件的简化处理
	服务器应用程序在接受来自多个远程客户端的套接字连接请求时，如果为每个连接都分配其各自的线程并且使用同步I/O，那么就会降低这类
程序的开发难度。
	如果某个应用程序对套接字执行读操作而此时还有数据到来，那么这个读操作将一直阻塞，直到有数据到达。在单线程应用程序中，这不仅意
味着在处理请求的过程中将停顿，热切还意味着这个线程被阻塞期间，对所有请求的处理都将停顿。为了避免这个问题，单线程服务器应用程序必
须使用非阻塞I/O，这种I/O的复杂性要远远高于同步I/O，并且很容易出错。然而如果每个请求都拥有自己的处理线程，那么在处理某个请求发生
的阻塞将不会影响其他请求的处理。
	早期的操作系统通常会将进程中可创建的线程数量限制在一个较低的阀值内，大约在数百个（甚至更少）左右。因此操作系统提供了一些高效
的方法来实现多路I/O，Java类库提供了一组非阻塞I/O的包（java.nio）。

1.2.4 响应更灵敏的用户界面

1.3 线程带来的风险
	Java对于




