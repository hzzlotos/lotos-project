1.4 线程无处不在
	即使在程序中没有显式地创建线程，但在框架中仍可能会创建线程，因此在这些线程中调用的代码同样必须是线程安全的。这将给开发人员在
设计和实现上带来沉重负担，因为开发线程安全的类比开发非线程安全的类要更加谨慎和细致。
	每个Java应用程序都会使用线程。当JVM启动时，它将为JVM的内部任务创建后台线程，并创建一个主线程来运行main方法。AWT和Swing的用
户界面框架将创建线程来管理用户界面事件。Timer将创建线程来执行延迟任务。一些组件框架，如Servlet和RMI，都会创建线程池并调用这些线
程中的方法。
	现实情况是几乎所有Java应用程序都是多线程的，因此在使用这些框架时仍需对应用程序状态的访问进行协同。当某个框架在应用程序中引入
并发性时，通常不可能将并发性仅局限于框架代码，因为框架本身会回调（Callback）应用程序的代码，而这些代码将访问应用程序的状态。同样，
对线程安全性的需求也不能局限于被调用的代码，而是要延伸到需要访问这些代码所访问的程序状态的所有代码路径。因此对线程安全性的需求将
在程序中蔓延开来。
1.Timer：Timer类的作用是使任务在稍后的时刻运行，或者运行一次或者周期性的运行。引入Timer可能会使串行程序变得复杂，因为TimerTask
将在Timer管理的线程中执行,而不是由应用程序来管理。如果某个TimerTask访问了应用程序中其他线访问的数据，那么不仅TimerTask需要以线
程安全的方式来访问数据，其他类也必须采用线程安全的方式来访问该数据。通常需要实现这个目标，最简单的方式是确保TimerTask访问的对象
本身是线程安全的，从而就能把线程安全性封装在共享对象内部。
2.Servlet与JavaServer Page（Jsp）：Servlet框架用于部署网页应用程序以及分发来自HTTP客户端的请求。到达服务器的请求可能会通过一
个过滤器链被分发到正确的Servlet或JSP。每个Servlet都表示一个程序逻辑组件，在高吞吐率的网站中，多个客户端可能同时请求用一个Servlet
的服务。在Servlet规范中，Servlet同样需要满足被多个线程同时调用，换句话说Servlet需是要线程安全的。
	即使你确保每次只有一个线程调用某个Servlet，但在构建网页应用程序时仍然必须注意线程安全性。Servlet通常会访问与其他Servlet共享
的信息，例如应用程序中的对象（这些对象保存在ServletContext中）或者会话中的对象（这些对象保存在每个客户端的HttpSession中）。当一
个Servlet访问在多个Servlet或者请求中共享的对象时，必须正确地协同对这些对象的访问，因为多个请求可能在不同的线程中同时访问这些对象。
Servlet和JSP以及在ServletContext和HttpSession等容器中保存的Servlet过滤器和对象等，都必须是线程安全的。
3.远程方法调用（RMI）：RMI使代码能够调用在其他JVM中运行的对象。当通过RMI调用某个远程方法时，传递给方法的参数必须被打包（也称为
列集[Marshaled]）到一个字节流中，通过网络传输给远程JVM，然后由远程JVM拆包（或者成为散集[Unmarshaled]）并传递给远程方法。
	当RMI代码调用远程对象时，这个调用将在哪个线程中执行。你并不知道，但肯定不会在你创建的线程中，而是将在一个由RMI管理的线程中调
用对象。RMI会创建多少个线程？同一个远程对象上的同一个远程方法会不会在多个RMI线程中被同时调用？
	远程对象必须注意两个线程安全性问题：正确地协同在多个对象中共享的状态，以及对远程对象本身状态的访问（由于同一个对象可能会在多
个线程中被同时访问）。与Servlet相同，RMI对象应该做好被多个线程同时调用的准备，并且必须确保他们自身的线程安全性。