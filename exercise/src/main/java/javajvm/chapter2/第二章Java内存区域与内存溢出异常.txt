2.2 运行时数据区域
如图（2_2_0）
（其中“方法区”和“堆”不是线程私有的，虚拟机栈，本地方法栈和程序计数器是线程私有的，即线程安全的）

2.2.1 程序计数器
	程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时
就是	通过改变这个计数器来选取吓一跳需要执行的字节码指令，分支，循环，跳转，异常处理，线程恢复等基础功能都需要依赖这个计数器来完成。
	如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果真在执行的是native方法，这个计数器
则为空。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。

2.2.2 Java虚拟机栈
	与程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行
的同时都会创建一个栈帧用于存储局部变量表，操作数栈，动态链接，方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个
栈帧在虚拟机栈中入展到出栈的过程。
	局部变量表存放了编译器可知的各种基本数据类型（boolean，byte，char，short，int，float，long，double），对象引用（reference
类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他的与此对象相关的位置）和
returnAddress类型（指向了一条字节码指令的地址）。
	其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译
期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。
	在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StrakOverflowError；
如果虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。

2.2.3 本地方法栈
	本地方法栈与虚拟机栈所发挥的作用是非常相似的，他们之间的区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地
方法栈则为虚拟机使用到的native方法服务。在虚拟机规范中对本地方法栈中方法使用的语言，使用方法与数据结构并没有强制规定，因此具体的
虚拟机可以自由实现它。甚至有的虚拟机（如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域
也会抛出StrakOverflowError和OutOfMemoryError异常。

2.2.4 Java堆
	对于多数应用来说，Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块，Java堆是被所有线程共享的一块内存区域，在虚拟机
启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的
对象实例以及数组都要在堆上分配，但是随着JIT编译器的发展与逃逸分析技术逐步成熟，栈上分配，标量替换优化技术将会导致一些微妙的变化
发生，所有对象都分配在堆上也渐渐变的不是那么“绝对”了。
	Java堆是垃圾收集器管理的主要区域，因此很多时候也被称作为“GC堆”。从内存回收的角度来看，由于现在收集器基本都采用分代收集算法，
所以Java堆中还可以细分为新生代忽然老年代；再细致一点的有EDen空间，From Survivor空间，To Survivor空间等。从内存分配的角度来看，
线程共享的Java堆中可能划分出多个线程私有的分配缓冲区。不过无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，
进一步划分的目的是为了更好的回收内存，或者更快的分配内存。
	根绝Java虚拟机规范的规定，Java堆可以处于物理不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，
即可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。如果在堆中没有内存
完成实例分配，并且堆也无法再扩展时，将抛出OutOfMemoryError异常。

2.2.5 方法区
	方法区与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。
虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。
	对于习惯在HotSpot虚拟机上开发，部署程序的开发者来说，很多人都更愿意把方法区成为“永久代”，本质上两者并不等价，仅仅是因为HotSpot
虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说是用永久代来实现方法区而已，这样HotSpot的垃圾收集器可以像管理Java堆一样管理
这部分内存，能够省去专门为方法区编写内存管理代码的工作。对于其他虚拟机来说是不存在永久代的概念的。原则上，如何实现方法区属于虚拟机
实现细节，不受虚拟机规范约束，但使用永久代来实现方法区，现在看来并不是一个好主意，因为这样更容易遇到内存溢出问题（永久代有
-XX:MaxPermSize的上限，J9和JRockit只要没有触碰到进程可用内存的上限，例如32位系统中的4GB，就不会出现问题），而且有极少数方法
（例如String.interm()）会因这个原因导致不用虚拟机下有不同的表现。因此，对于HotSpot虚拟机，根据官方发布的线路图信息，现在也有放弃
永久代并逐步改为采用Native Memory来实现方法区的规划了，在目前已经发布的JDK1.7的HotSpot中，已经吧原来放在永久代的字符串常量池移出。
	Java虚拟机规范对方法区的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。
相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这区域的内存回收目标主要
是针对常量池的回收和对类型的卸载，一般来说，这个区域的回收成绩比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的
回收确实是必要的。在Sun公司的BUG列表中，曾出现过的若干个严重的BUG就是由于低版本的HotSpot虚拟机对此区域未完全回收而导致内存泄漏。
	根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。

2.2.6 运行时常量池
	运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本，字段，方法，接口等描述信息外，还有一项
信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中
存放。
	Java虚拟机对Class文件没一部分（自然也包括常量池）的格式都有严格规定，每一个字节用于存储那种数据都必须符合规范上的要求才会被
虚拟机认可，装载和执行，但对于运行时常量池，Java虚拟机规范没有做任何细节的要求，不同的提供商实现的虚拟机可以按照自己的需要来实现
这个内存区域。不过，一般来说，除了保存Class文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中。
	运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置
入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用的比较多的便是
String类的intern()方法。
	既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。

2.2.7 直接内存
	直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致
OutOfMemoryError异常出现，所以我们放到这里一起讲解。
	在JDK1.4中新加入了NIO类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接飞陪堆外内存，
然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆
和Native堆中来回复制数据。
	显然，本机直接内存的分配不会受到Java堆大小的限制，但是既然是内存，肯定还是会受到本金总内存大小以及处理器寻址空间的限制。
服务器管理员在配置虚拟机参数时，会根据实际内存设置-Xmx等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制，从而
导致动态扩展时出现OutOfMemoryError异常。

2.3 hotspot虚拟机对象探秘
2.3.1 对象的创建
	创建对象（例如克隆，反序列化）通常仅仅是一个new关键字而已，而在虚拟机中，对象（仅限普通Java对象，不包括数组和class对象等）的创建。
	虚拟机遇到一条new指令，首先将去检查这个指令的参数是否能在常量池中定位到类符号引用并且检查这个符号引用代表的类是否已被加载，
解析和初始化过。如果没有则必须先执行相应的类加载过程（见书第七章）。
	在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确认（如何确认在2.3.2节中介绍），
为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。
*假设Java堆中的内存是绝对规整的，所有用过的内存都存放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，那所分配
内存就仅仅是把那个指针想空闲空间那边挪动一段与对象大小相等的距离，这种分配方式成为“指针碰撞”。
*如果Java堆中的内存并不是规整的，已使用的内存和空闲的内存相互交错，那就没有办法简单的进行指针碰撞了，虚拟机就必须维护一个列表，
记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”。
	其中选择用哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。因此，在使用
Serial，ParNew等带Compact过程的收集器时，系统采用的分配算法是指针碰撞，而使用CMS这种基于Mark-Sweep算法的收集器时，通常采用空闲
列表。除了如何划分可用空间之外，还有另外一个并发情况下堆内不是线程安全的，可能出现正在给A分配内存，指针还没来及修改，而B又同时
使用了原来的指针分配内存的情况。解决该问题有两种方案：
*一种是对分配空间的动作进行同步处理----实际上虚拟机采用cas配上失败重试的方式保证跟新操作的原子性；
*另一种是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（TLAB）。
哪个线程需要分配内存，就在哪个线程的TLAB上分配，只有TLAB用完并分配新的TLAB时，才需要同步锁定。
	其中虚拟机是否使用TLAB，可以通过 -XX:+/-UseTLAB参数来设定。内存分配完成后，虚拟机需要将分配到内存空间都初始化为零值（不包括
对象头），如果使用TLAB，这一工作也可以以前至TLAB分配时进行。这一步操作保证了对象实例字段在Java代码中可以不赋初始值就可以直接使用，
程序能访问到这些字段的数据类型所对应的零值。
	接下来，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息，对象的哈希码，对象的GC分代年龄
等信息。这些信息存放在对象的对象头之中。根据虚拟机当前的运行状态的不用，如是否启用偏向锁等，对象投会有不同的设置方式。
	在上面工作都完成之后，从虚拟机的角度来看，一个新的对象已经产生了，但从Java程序的角度来看，对象创建才刚刚开始，<init>方法还
没有执行，所有的字段都为零。所有一般来说（由字节码中是否跟随invokespecial指令所决定），执行new指令之后会接着执行<init>方法，把
对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生。

2.3.2 对象的内存布局
	在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（header），实例数据（Instance Data）和对齐填充（Padding）。
	HotSpot虚拟机的对象投包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码（HashCode），GC分代年龄，锁状态标志，
线程持有的锁，偏向线程ID，偏向时间戳等，这部分数据的长度在32位和64位虚拟机（未开启压缩知指针）中分别为32bit和64bit，官方称它为
“Mark Word”。对象需要存储的运行时数据很多，其实已经超过32位，64位bitmap结构所能记录的限度，但是对象投信息是与对象自身定义的数据
无关的额外存储成本，Mark Word被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，根据对象的状态复用自己的存储空间。
例如在32位的HotSpot虚拟机中，如果对象处于未被锁定状态下，那么Mark Word的32bit空间中的25bit用于存储对象哈希码，4bit用于存储对象
分代年龄，2bit用于存储锁标志位，1bit固定为0，而在其他状态（轻量级锁定，重量级锁定，GC标记，可偏向）下对象的存储内容如下表：

	对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。并不是所有的虚拟机
实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身，这点将在2.3.3节讨论。另外，如果对象是
一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是
从数据的元数据中却无法确定数组的大小。
	接下来的实力数据部分是对象真正存储的有效信息，也是在程序代码中所定义的课中类型的字段内容。无论是从父类继承下来的，还是在子类
中定义的，都需要记录起来。这部分的存储顺序会受到虚拟机分配策略参数和字段在Java源码中定义顺序的影响。hotSpot虚拟机默认的分配策略为
longs/doubles，ints，shorts/chars，bytes/booleans，oops（Ordinary Object Pointers），从分配策略中可以看出，相同宽度的字段
总是被分配到一起。在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。如果CompactFields参数值为true（默认为true），
那么子类之中较窄的变量也可能会插入到父类变量的空隙之中。
	第三部分对齐填充并不是必然存在的，也没有特别的含义，他仅仅起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址
必须是8字节的整数倍，即对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数，因此当对象实例数据部分没有对齐时，就需要通过
对齐填充来补全。

2.3.3 对象的访问定位
	Java程序需要通过栈上的reference数据来操作堆上的具体对象。由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，
并没有定义这个引用应该通过何种方式去定位，访问堆中的对象的具体位置，所以对象访问方式也是取决于虚拟机实现而定的。目前流行的两种是
句柄和直接指针。
	如果使用句柄访问的话，那么Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象
实例数据与数据类型各自的具体地址信息。
	如果使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址。
（在对象实例数据中包含了对象类型数据的指针）。
	这两种对象访问方式各有优势，使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动时只会修改句柄中的
实例数据指针，而reference本身不需要修改。而是用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象
的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。本书主要讨论的是Sun HotSpot，使用的是第二种方式进行
对象访问的，但从整个软件开发的范围来看，句柄访问的情况也十分常见。

2.4 实战：OutOfMemoryError异常
	目的：第一，通过代码验证Java虚拟机规范中描述的各个运行时区域存储的内容；第二，希望读者在工作中遇到实际的内存溢出异常时，能
根据异常的信息快速判断是哪个区域的内存溢出，知道什么样的代码可能会导致这些区域内存溢出，以及出现这些异常后该如何处理。

2.4.1 Java堆溢出
	Java堆用于存储对象实例，只要不断的创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象
数量到达最大堆的容量限制后就会产生内存溢出异常。
	将堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展，通过参数-XX:+HeapDumpOnOutOfMemoryError可以让虚拟机在
出现内存溢出异常时Dump出当前的内存堆转储快照以便时候进行分析。Java堆内存的OOM异常是实际应用中常见的内存溢出异常情况。当出现Java
堆内存溢出时，会提示“Java heap space”。要解决这个区域的异常，一般的手段是先通过内存映像分析工具（如Eclipse Memory Analyzer）
对Dump出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存
溢出（Memory Overflow）。
*如果是内存泄露，可进一步通过工具查看泄露对象到GC Roots的引用链。于是就能找到泄露对象是用过怎样的路径与
GC Roots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄露对象的类型信息及GC Roots引用链的信息，就可以比较准确地定位出泄露代码
的位置。
*如果不存在内存泄露，换句话说，就是内存中的对象确认都还必须存活着，那就应当检查虚拟机堆参数（-Xmx与-Xms），与机器物理内存对比看是
否还可以调大，从代码上检查是否存在某些对象生命周期过长，持有状态时间过长的情况，尝试减少程序运行期的内存消耗。
后面三章详细讲解处理问题。

2.4.2 虚拟机栈和本地方法栈溢出
	由于在HotSpot虚拟机中并不区分虚拟机栈和本地方法栈，因此，对于HotSpot来说，虽然-Xoss参数（设置本地方法栈大小）存在，但实际上
是无效的，栈容量只由-Xss参数设定。关于虚拟机栈和本地方法栈，在Java虚拟机规范中描述了两种异常：
如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverfolwError异常。
如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。
	这里把异常分成两种情况，看似更加严谨，但却存在着一些互相重叠的地方：当栈空间无法继续分配时，到底是内存太小，还是已使用的栈
空间太大，其本质上只是对同一件事情的两种表述而已。实验只能产生StackOverflowError异常。
使用-Xss参数减少栈内存容量。结果抛出StackOverflowError异常，异常出现时输出的堆栈深度相应缩小。
定义了大量的本地变量，增大此方法帧中本地变量表的长度。结果抛出StackOverflowError异常时输出的堆栈深度相应缩小。
	实验结果表明：在单个线程下，无论是由于栈帧太大还是虚拟机容量太小，当内存无法分配的时候，虚拟机抛出的都是StackOverflowError
异常。
	如果测试不限于单线程，通过不断的建立线程的方式倒是可以产生内存溢出异常，操作系统分配给每个进程的内存是有限制的，例如32位的
Windows限制为2GB。虚拟机提供了参数来控制Java堆和方法区的这两部分内存的最大值。剩余内存为2GB减去Xmx（最大堆容量），再减去MaxPermSize
（最大方法区容量），程序计数器消耗内存很小，可以忽略掉。如果虚拟机进程本身消费的内存不计算在内，剩下的内存就由虚拟机栈和本地方法栈
“瓜分”了。每个线程分配到的栈容量越大，可以建立的线程数量自然就越少，建立线程时就越容易把剩下的内存耗尽。这一点读者需要在开发多线程
的应用时特别注意，出现StackOverflowError异常时有错误堆栈可以阅读，相对来说，比较容易找到问题的所在。而且，如果使用虚拟机默认参数，
栈深度在大多数情况下（因为每个方法压入栈的帧大小并不是一样的，所以只能说在大多数情况下）达到1000～2000完全没有问题，对于正常的方法
调用（包括递归），这个深度应该完全够用了。但如果是建立过多线程导致的内存溢出，在不能减少线程数或者更换64位虚拟机的情况下，通过减少
最大堆和减少栈容量来换取更多的线程。如果没有这方面的经验，这种通过减少内存来解决内存溢出的方式会比较难以想到。『不确认』

2.4.3 方法区和运行时常量池溢出
	由于运行时常量池是方法区的一部分，因此这两个区域的溢出测试就放在一起进行。String.intern()是一个Native方法，它的作用是：如果
字符串，则返回代表池中这个字符串的String对象；否则将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。1.6之前
的版本中，由于常量池分配在永久代内，我们可以通过-XX:PermSize和-XX:MaxPermSize限制方法区大小，从而间接限制其中常量池的容量。运行
时常量池溢出，在OutOfMemoryError后面跟随的提示信息是“PermGen space”，说明运行时常量池属于方法区（HotSpot虚拟机中的永久代）的
一部分。	而使用JDk1.7则不会得到相同的结果，while循环将一直进行下去。由于这个字符串常量池的实现问题，还可以引申出一个更有意思的影响。
	E2_4_2_3_2_RuntimeConstantPoolOOM例子中，在JDK1.6下运行会得到两个false，而1.7下运行则是一个true与1个false。差异原因是：
1.6中intern()方法会把首次遇到的字符串实例复制到永久代中，返回的也是永久代这个字符串实例的引用。而String创建的字符串实例在Java堆上，
所以必然不是一个引用，必将返回false。而在1.7上的intern()方法实现不会再复制实例，只是在常量池中记录首次出现的实例引用，因此intern()
返回的引用和由String创建的那个字符串实例是同一个。对str2比较返回false是因为“java”这个字符串之前已经出现过了，字符串常量池中已经
有它的引用了，不符合“首次出现”的原则，而“计算机软件”这个字符串则是首次出现的，因此返回true。
	方法区用于存放Class的相关信息，如类名，访问修饰符，常量池，字段描述，方法描述等。对于这些区域的测试，基本的思路是运行时产生
大量的类去填满方法区，直到溢出。方法区溢出也是一种常见的内存溢出异常，一个类药被垃圾收集器回收掉，判定条件是比较苛刻的。在经常
动态生成大量Class的应用中，需要特别注意类的回收状况。这类场景除了上面提到的程序使用cglib字节码增强和动态语言之外,常见的还有:
大量jsp或动态产生jsp文件的应用。

2.4.4 本机直接内存溢出
	DirectMemory容量可通过-XX:MaxDirectMemorySize指定,如果不指定,则默认与Java堆最大值（-Xmx指定）一样，直接通过反射获取Unsafe
实例进行内存分配（Unsafe类的getUnsafe()方法限制了只有引导类加载器才会返回实例，也就是设计者希望只有rt.jar中的类才能使用Unsafe
的功能）。因为，虽然使用DirectByteBuffer分配内存也会抛出内存溢出异常，但它抛出异常时并没有真正向操作系统申请分配内存，而是通过
计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是Unsafe.allocateMemory()。由DirectMemory导致的内存溢出，一个明显
的特征是在Heap Dump文件中不会看见明显的异常，如果读者发现OOM『内存溢出』之后Dump文件很小，而程序中又直接或间接使用NIO，那就可以
考虑检查一下是不是这方面的原因。
