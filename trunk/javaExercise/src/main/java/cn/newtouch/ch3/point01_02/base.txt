面向对象
不必了解对象动作的具体过程
其信息封装在对象本身之中
只需要了解所需的业务方法

在系统构造过程之中,尽可能运用人类的自然思维方式

对象与类
类是用于描述同一类型的对象的一个抽象的概念
类定义了这一类对象所应具有的静态与动态特性

对象通过"属性"与"方法"来分别对应事物所具有的静态特性与动态特性

类是对象的抽象 对象是类的实例

关联关系
具体对应至代码中即
方法中某个参数为所关联的对象

继承关系(一般与特殊)
"...是一个..."

聚合关系 是松耦合
"...是...的一部分"

组合关系 
"...是...必不可少的一部分"

实现关系 接口
定义应该具有的方法,而子类各自实现

多态 见后面

分析问题的步骤
1.问题里面有哪些个类/对象--->找名词,要分清属性还是类
2.这些类/对象应该有哪些属性/方法--->业务中所需要的做的事,做这些事所必要的一些属性
3.类/对象之间具备了什么样的关系

对于java来说 面向对象是:
四个特征:抽象/封装/继承/多态
*抽象:对象中将与业务无关的部分忽略,充分关注有关部分,对外提供服务接口
*封装:封装是把数据和过程包围起来,对数据的操作只能通过类所定义的操作方法,对外隐藏服务实现
*继承:子类继承了父类的特性,并且拥有自己的特性以更好的满足需要
*多态:重载/重写,面对同一个过程,不同的对象实例所需要的参数不同或者所得到的结果不同
好处是拥有可重用/可扩展/可维护(当需求发生变更时,修改少量代码即可完成,而绝非是把整个流程全部重新写一遍)等特性

类是实例对象的封装体(模板),成员变量就是静态属性,方法就是动态属性
最重要的是面对对象是一组对象相互配合通过沟通完成特定的功能

汇编是对机器语言的抽象
面向过程是对汇编的抽象
面向对象更符合对现实问题的抽象
面向组件开发   