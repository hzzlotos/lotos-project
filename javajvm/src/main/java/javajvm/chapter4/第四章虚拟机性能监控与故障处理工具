	性能监控的数据包括：运行日志，异常堆栈，GC日志，线程快照（threaddump/javacore文件），堆转储快照（heapdump/hprof文件）等。

4.2.1 jps：虚拟机进程状况工具
	列出正在运行的虚拟机进程，并显示uniji执行主类（Main Class，main()函数所在的类）名称以及这些进程的本地虚拟机唯一ID（LVMID）。
虽然功能比较单一，但是用频率较高的JDK命令行工具，因为其他工具需要输入该工具查找到的ID来确定要监控的是哪一个虚拟机进程。后面可加
参数列表如图4_2_1.png。
	命令格式为： jps [-q] [-mlvV] [<hostid>]

4.2.2 jstat：虚拟机统计信息监视工具
	jstat是用于监视虚拟机各种运行状态信息的命令行工具。可以显示本地或者远程虚拟机进程中的类装载，内存，垃圾收集，JIT编译等运行
数据，在没有GUI图形界面只提供了纯文本控制台环境的服务器上，该工具是运行期定位虚拟机性能问题的首选工具。
	命令格式为： jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]
	其中：  <hostid>: <hostname>[:<port>]
选项option代表客户希望查询的虚拟机信息，主要分为3类：类装载，垃圾收集，运行期编译状况。参数列表如图4_2_2_1.png。
远程服务的话需要远程主机提供RMI支持，Sun提供的jstatd工具可以很方便地建立远程RMI服务器。

示例：参看图4_2_2_2.png，查询结果表明：这台服务器的新生代Eden区（E表示Eden）使用了6.2%的空间，两个Survivor区（S0，S1表示
Survivor0，Survivor1）里面都是空的，老年代（O表示Old）和永生代（P表示Permanent）则分别使用了41.42%和47.20%的空间。程序运行以来
共发生Minor GC（YGC表示Young GC）16次，总耗时0.105秒，发生Full GC（FGC表示Full GC）3次，Full GC总耗时（FGCT表示Full GC Time）
为0.472秒，所有GC总耗时（GCT表示GC Time）为0.577秒。

4.2.3 jinfo：Java配置信息工具
	jinfo的作用是实时地查看和调整虚拟机各项参数。使用jps命令的-v参数可以查看虚拟机启动时显示指定的参数列表，但如果想知道未被显式
制定的参数的系统默认值，除了去找资料外，就只能使用jinfo的-flag选项进行查询了（如果只限于JDK1.6或以上版本的话，使用
java -XX:+PrintFlagsFinal）查看参数默认值也是一个很好的选择），jinfo还可以使用-sysprops选项把虚拟机进程的System.getProperties()
的内容打印出来。这个命令在JDK1.5时期已经随着Linux版的JDK发布，当时只提供了信息查询的功能，JDK1.6之后，jinfo在Windows和Linux
平台都有提供，并加入了运行期修改参数的能力，可以使用-flag[+|-]name或者-flag name=value修改一部分运行期可写的虚拟机参数值.JDK1.6
中，jinfo对于Windows平台功能仍然有较大限制，只提供了最基本的-flag选项。
	命令格式：jinfo { option } pid     示例如图：4_2_3.png

4.2.4 jmap：Java内存映像工具
	jmap命令用于生成堆转储快照（一般称为heapdump或dump文件）。如果不是用jmap命令，想要获取Java堆转储快照，还有一些比较“暴力”的
手段：比如在第二章中用过的 -XX:+HeapDumpOnOutOfMemoryError参数，可以让虚拟机在OOM异常出现之后自动生成dump文件，通过
-XX:HeapDumpOnCtrlBreak参数则可以使用[Ctrl]+[Break]键让虚拟机生成dump文件。
	jmap作用不仅仅为了获取dump文件，它还可以查询finalize执行队列，Java堆和永久带的详细信息，如空间使用率，当前用的是哪种收集器等。
和jinfo命令一样，jmap有不少功能在Windows平台下都是受限的，除了生成dump文件的-dump选项和用于查看每个类的实例，空间占用统计的-histo
选项在所有操作系统都提供之外，其余选项都只能在Linux/Solaris下使用。
	jmap 命令格式：jmap [ option ] vmid     option选项合法值参看图4_2_4_1.png。
	示例如图：4_2_4_2.png

4.2.5 jhat：虚拟机堆转储快照分析工具
	JDK提供jhat命令与jmap搭配使用，来分析jmap生成的堆转储快照。jhat内置了一个微型的HTTP/HTML服务器，生成dump文件的分析结果后，
可以在浏览器中查看。不过在实际工作中，除非手中没有别的工具可用，一般不会使用jhat来分析dump文件的。原因一：不会在部署应用程序的
服务器上直接分析dump文件，其二是jhat分析工程相对来说比较简陋。

4.2.6 jstack：Java堆栈跟踪工具
	jstack命令用于生成虚拟机当前时刻的线程快照（一般称为threaddump或者javacore文件）。线程快照就是当前虚拟机内每一条线程正在执
行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁，死循环，请求外部资源导致的长时间等待等都
是导致线程长时间停顿的常见原因。线程出现停顿的时间通过jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做些什么
事情，或者等待着什么资源。
	jstack 命令格式：jstack [ option ] vmid     option选项合法值参看图4_2_6_1.png。
	示例如图：4_2_6_2.png
	在JDK1.5中，java.lang.Thread类新增了一个getAllStackTraces()方法用于获取虚拟机中所有线程的StackTraceElement对象。使用这个
这个方法可以通过简单几行代码就完成了jstack的大部分功能，在实际项目中可以调用该方法做个管理页面随时使用浏览器查看线程堆栈。
	示例见chapter4/E4_2_6.jsp
	
4.2.7 HSDIS：JIT生成代码反汇编
	（实用性不强）

4.3 JDK的可视化工具
	两个功能强大的可视化工具：JConsole和VisualVM。

4.3.1 JConsole：Java监视与管理控制台
	JConsole是一种基于JMX的可视化监视管理工具。管理部分的功能是针对JMX的可视化监视管理工具。它管理部分的功能是针对JMX MBean进行
管理。
1.启动JConsole
	通过JDK/bin目录下的“jconsol.exe”启动JConsole后，将自动搜索出本机运行的所有虚拟机进程，不需要用户自己再使用jps来查询了，双
击选择其中一个进程即可开始监控，也可以使用下面的“远程进程”功能来连接远程服务器，对远程虚拟机进行监控。









