注解接口元素声明实际是方法声明，注解接口方法没有任何参数，没有throws语句，并却也不是泛型
注解元素类型如下：
 1. int,short,long,byte,char,double,float,boolean
 2. String
 3. Class
 4. enum
 5. 一个注解类型
 6. 由上述类型组成的数组

如果元素值是一个数组，那么要将该值用括号括起来，如果该元素具有单值，忽略该括号
 @BugReport(ref=@Reference(id="3352627"),...)
注意 在注解中引入循环依赖是一种错误，如果在BugReport中使用了TestCase，那么TestCase则不可以再引用BugReport

可以将注解添加至如下项：
包，类，接口（包括注解接口），方法，构造器，实例成员（包含enum变量），本地变量，参数变量
一个项可以有多个注解，主要他们属于不同的类型即可。当注解一个特定项的时候，不能多次使用同一个注解类型。
如果需要，可以设计为：
 @BugReports({@BugReport(showStopper=true,reportBy="Joe"),@BugReport(reportBy={"Harry","Carl"})})
 void myMethod()
 
用于编译的注解：
@Deprecated 表示过时项
@SuppressWarnings("unchecked") 告知编译器阻止特殊类型的警告信息
@Override 只能应用在方法上表示覆盖父类方法，但会阻止具有这种注解的方法覆盖一个来自超类的方法
@Generated 注解的目的是供代码生成工具来使用

用于资源管理的注解：
@PostConstruct/@PreDestroy 用于控制对象生命周期的环境中，标记了这些注解的方法应该在对象被构建之后，或者对象被移除之前，紧接着调用
@Resource 用于资源注入

元注解：
@Target({ElementType.METHOD,ElementType.TYPE}) 用以限制该注解可以应用到那些项上。参数为枚举类型ElementType的值
@Retention(RetentionPolicy.RUNTIME) 用于指定一条注解应该保留多长时间。其中只有RUNTIME表示可由虚拟机载入
@Documented 为javadoc这样的文档工具提供了一些提示
@Inherited 只能应用于对类的注解，如果一个类具有继承注解，那么它的所有子类都自动具有相同的注解

源码级注解处理：
