第二章 java内存区域与内存溢出异常
2.2 运行时数据区域
运行时数据区
方法区     虚拟机栈     本地方法栈
	堆               程序计数器
执行引擎    本地库接口
（其中“方法区”和“堆”不是线程私有的，虚拟机栈，本地方法栈和程序计数器是线程私有的，即线程安全的）
2.2.1 程序计数器
	程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时
就是	通过改变这个计数器来选取吓一跳需要执行的字节码指令，分支，循环，跳转，异常处理，线程恢复等基础功能都需要依赖这个计数器来完成。
	如果线程正在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果真在执行的是native方法，这个计数器
则为空。此内存区域是唯一一个在java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。
2.2.2 java虚拟机栈
	与程序计数器一样，java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是java方法执行的内存模型：每个方法在执行
的同时都会创建一个栈帧用于存储局部变量表，操作数栈，动态链接，方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个
栈帧在虚拟机栈中入展到出栈的过程。
	局部变量表存放了编译器可知的各种基本数据类型（boolean，byte，char，short，int，float，long，double），对象引用（reference
类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他的与此对象相关的位置）和
returnAddress类型（指向了一条字节码指令的地址）。
	其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译
期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。
	在java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StrakOverflowError；
如果虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。
2.2.3 本地方法栈
	本地方法栈与虚拟机栈所发挥的作用是非常相似的，他们之间的区别不过是虚拟机栈为虚拟机执行java方法（也就是字节码）服务，而本地
方法栈则为虚拟机使用到的native方法服务。在虚拟机规范中对本地方法栈中方法使用的语言，使用方法与数据结构并没有强制规定，因此具体的
虚拟机可以自由实现它。甚至有的虚拟机（如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域
也会抛出StrakOverflowError和OutOfMemoryError异常。
2.2.4 java堆
	对于多数应用来说，java堆（Java Heap）是java虚拟机所管理的内存中最大的一块，java堆是被所有线程共享的一块内存区域，在虚拟机
启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在java虚拟机规范中的描述是：所有的
对象实例以及数组都要在堆上分配，但是随着JIT编译器的发展与逃逸分析技术逐步成熟，栈上分配，标量替换优化技术将会导致一些微妙的变化
发生，所有对象都分配在堆上也渐渐变的不是那么“绝对”了。
	java堆是垃圾收集器管理的主要区域，因此很多时候也被称作为“GC堆”。从内存回收的角度来看，由于现在收集器基本都采用分代收集算法，
所以java堆中还可以细分为新生代忽然老年代；再细致一点的有EDen空间，From Survivor空间，To Survivor空间等。从内存分配的角度来看，
线程共享的java堆中可能划分出多个线程私有的分配缓冲区。不过无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，
进一步划分的目的是为了更好的回收内存，或者更快的分配内存。
	根绝java虚拟机规范的规定，java堆可以处于物理不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，
即可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。如果在堆中没有内存
完成实例分配，并且堆也无法再扩展时，将抛出OutOfMemoryError异常。
2.2.5 方法区
	方法区与java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。
虽然java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与java堆区分开来。
	对于习惯在
	
	
	
	
	
2.2.6 运行时常量池
2.2.7 直接内存

2.3 hotspot虚拟机对象探秘
2.3.1 对象的创建
	创建对象（例如克隆，反序列化）通常仅仅是一个new关键字而已，而在虚拟机中，对象（仅限普通java对象，不包括数组和class对象等）的创建。
	虚拟机遇到一条new指令，首先将去检查这个指令的参数是否能在常量池中定位到类符号引用并且检查这个符号引用代表的类是否已被加载，解析和初始化过。
如果没有则必须先执行相应的类加载过程（见书第七章）。
	在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确认（如何确认在2.3.2节中介绍），
为对象分配空间的任务等同于把一块确定大小的内存从java堆中划分出来。
假设java堆中的内存是绝对规整的，所有用过的内存都存放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，那所分配
内存就仅仅是把那个指针想空闲空间那边挪动一段与对象大小相等的距离，这种分配方式成为“指针碰撞”。
如果java堆中的内存并不是规整的，已使用的内存和空闲的内存相互交错，那就没有办法简单的进行指针碰撞了，虚拟机就必须维护一个列表，
记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”。
其中选择用哪种分配方式由java堆是否规整决定，而java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。因此，在使用Serial，
ParNew等带Compact过程的收集器时，系统采用的分配算法是指针碰撞，而使用CMS这种基于Mark-Sweep算法的收集器时，通常采用空闲列表。
除了如何划分可用空间之外，还有另外一个并发情况下堆内不是线程安全的，可能出现正在给A分配内存，指针还没来及修改，而B又同时使用了
原来的指针分配内存的情况。
解决该问题有两种方案，一种是对分配空间的动作进行同步处理----实际上虚拟机采用cas配上失败重试的方式保证跟新操作的原子性；
另一种是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在java堆中预先分配一小块内存，称为本地线程分配缓冲。哪个线程
需要分配内存，就在哪个线程的TLAB上分配，只有TLAB用完并分配新的TLAB时，才需要同步锁定。
其中虚拟机是否使用TLAB，可以通过 -XX:+/-UseTLAB参数来设定。
内存分配完成后，虚拟机需要将分配到内存空间都初始化为零值（不包括对象头），如果使用TLAB，这一工作也可以以前至TLAB分配时进行。这一步
操作保证了对象实例字段在java代码中可以不赋初始值就可以直接使用，程序能访问到这些字段的数据类型所对应的零值。
	接下来，虚拟机要对对象进行不要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息，对象的哈希码，对象的GC分代年龄
等信息。这些信息存放在对象的对象头之中。根据虚拟机当前的运行状态的不用，如是否启用偏向锁等，对象投会有不同的设置方式。
	在上面工作都完成之后，从虚拟机的角度来看，一个新的对象已经产生了，但从java程序的角度来看，对象创建才刚刚开始，<init>方法还
没有执行，所有的字段都为零。所有一般来说（由字节码中是否跟随invokespecial指令所决定），执行new指令之后会接着执行<init>方法，把
对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生。

2.3.2 对象的内存布局
	在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（header），实例数据（Instance Data）和对齐填充（Padding）。
	HotSpot虚拟机的对象投包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码（HashCode），GC分代年龄，锁状态标志，
线程持有的锁，偏向线程ID，偏向时间戳等，这部分数据的长度在32位和64位虚拟机（未开启压缩知指针）中分别为32bit和64bit，官方称它为
“Mark Word”。对象需要存储的运行时数据很多，其实已经超过32位，64位bitmap结构所能记录的限度，但是对象投信息是与对象自身定义的数据
无关的额外存储成本，Mark Word被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，根据对象的状态复用自己的存储空间。
例如在32位的HotSpot虚拟机中，如果对象处于未被锁定状态下，那么Mark Word的32bit空间中的25bit用于存储对象哈希码，4bit用于存储对象
分代年龄，2bit用于存储锁标志位，1bit固定为0，而在其他状态（轻量级锁定，重量级锁定，GC标记，可偏向）下对象的存储内容如下表：
		内容                                                               标志位     状态
对象哈希码，对象分代年龄                                   01      未锁定
指向锁记录的指针                                                       00      轻量级锁定
指向重量级锁的指针                                                  10      膨胀（重量级锁定）
空，不需要记录信息                                                  11      GC标记
偏向线程ID，偏向时间戳，对象分代年龄     01      可偏向
	
	对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。并不是所有的虚拟机
实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身，这点将在2.3.3节讨论。另外，如果对象是
一个java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通java对象的元数据信息确定java对象的大小，但是
从数据的元数据中却无法确定数组的大小。
	接下来的实力数据部分是对象真正存储的有效信息，也是在程序代码中所定义的课中类型的字段内容。无论是从父类继承下来的，还是在子类
中定义的，都需要记录起来。这部分的存储顺序会受到虚拟机分配策略参数和字段在java源码中定义顺序的影响。hotSpot虚拟机默认的分配策略为
longs/doubles，ints，shorts/chars，bytes/booleans，oops（Ordinary Object Pointers），从分配策略中可以看出，相同宽度的字段
总是被分配到一起。在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。如果CompactFields参数值为true（默认为true），
那么子类之中较窄的变量也可能会插入到父类变量的空隙之中。
	第三部分对齐填充并不是必然存在的，也没有特别的含义，他仅仅起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址
必须是8字节的整数倍，即对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数，因此当对象实例数据部分没有对齐时，就需要通过
对齐填充来补全。

2.3.3 对象的访问定位
	java程序需要通过栈上的reference数据来操作堆上的具体对象。由于reference类型在java虚拟机规范中只规定了一个指向对象的引用，
并没有定义这个引用应该通过何种方式去定位，访问堆中的对象的具体位置，所以对象访问方式也是取决于虚拟机实现而定的。目前流行的两种是
句柄和直接指针。
如果使用句柄访问的话，那么java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据
与数据类型各自的具体地址信息。
如果使用直接指针访问，那么java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址。（在
对象实例数据中包含了对象类型数据的指针）。
	这两种对象访问方式各有优势，使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动时只会修改句柄中的
实例数据指针，而reference本身不需要修改。而是用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象
的访问在java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。本书主要讨论的是Sun HotSpot，使用的是第二种方式进行
对象访问的，但从整个软件开发的范围来看，句柄访问的情况也十分常见。





