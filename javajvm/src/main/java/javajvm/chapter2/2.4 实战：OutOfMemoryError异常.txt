2.4 实战：OutOfMemoryError异常
	目的：第一，通过代码验证Java虚拟机规范中描述的各个运行时区域存储的内容；第二，希望读者在工作中遇到实际的内存溢出异常时，能
根据异常的信息快速判断是哪个区域的内存溢出，知道什么样的代码可能会导致这些区域内存溢出，以及出现这些异常后该如何处理。

2.4.1 Java堆溢出
	Java堆用于存储对象实例，只要不断的创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象
数量到达最大堆的容量限制后就会产生内存溢出异常。
	将堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展，通过参数-XX:+HeapDumpOnOutOfMemoryError可以让虚拟机在
出现内存溢出异常时Dump出当前的内存堆转储快照以便时候进行分析。Java堆内存的OOM异常是实际应用中常见的内存溢出异常情况。当出现Java
堆内存溢出时，会提示“Java heap space”。要解决这个区域的异常，一般的手段是先通过内存映像分析工具（如Eclipse Memory Analyzer）
对Dump出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存
溢出（Memory Overflow）。
*如果是内存泄露，可进一步通过工具查看泄露对象到GC Roots的引用链。于是就能找到泄露对象是用过怎样的路径与
GC Roots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄露对象的类型信息及GC Roots引用链的信息，就可以比较准确地定位出泄露代码
的位置。
*如果不存在内存泄露，换句话说，就是内存中的对象确认都还必须存活着，那就应当检查虚拟机堆参数（-Xmx与-Xms），与机器物理内存对比看是
否还可以调大，从代码上检查是否存在某些对象生命周期过长，持有状态时间过长的情况，尝试减少程序运行期的内存消耗。
后面三章详细讲解处理问题。

2.4.2 虚拟机栈和本地方法栈溢出
	由于在HotSpot虚拟机中并不区分虚拟机栈和本地方法栈，因此，对于HotSpot来说，虽然-Xoss参数（设置本地方法栈大小）存在，但实际上
是无效的，栈容量只由-Xss参数设定。关于虚拟机栈和本地方法栈，在Java虚拟机规范中描述了两种异常：
如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverfolwError异常。
如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。
	这里把异常分成两种情况，看似更加严谨，但却存在着一些互相重叠的地方：当栈空间无法继续分配时，到底是内存太小，还是已使用的栈
空间太大，其本质上只是对同一件事情的两种表述而已。实验只能产生StackOverflowError异常。
使用-Xss参数减少栈内存容量。结果抛出StackOverflowError异常，异常出现时输出的堆栈深度相应缩小。
定义了大量的本地变量，增大此方法帧中本地变量表的长度。结果抛出StackOverflowError异常时输出的堆栈深度相应缩小。
	实验结果表明：在单个线程下，无论是由于栈帧太大还是虚拟机容量太小，当内存无法分配的时候，虚拟机抛出的都是StackOverflowError
异常。
	如果测试不限于单线程，通过不断的建立线程的方式倒是可以产生内存溢出异常，操作系统分配给每个进程的内存是有限制的，例如32位的
Windows限制为2GB。虚拟机提供了参数来控制Java堆和方法区的这两部分内存的最大值。剩余内存为2GB减去Xmx（最大堆容量），再减去MaxPermSize
（最大方法区容量），程序计数器消耗内存很小，可以忽略掉。如果虚拟机进程本身消费的内存不计算在内，剩下的内存就由虚拟机栈和本地方法栈
“瓜分”了。每个线程分配到的栈容量越大，可以建立的线程数量自然就越少，建立线程时就越容易把剩下的内存耗尽。这一点读者需要在开发多线程
的应用时特别注意，出现StackOverflowError异常时有错误堆栈可以阅读，相对来说，比较容易找到问题的所在。而且，如果使用虚拟机默认参数，
栈深度在大多数情况下（因为每个方法压入栈的帧大小并不是一样的，所以只能说在大多数情况下）达到1000～2000完全没有问题，对于正常的方法
调用（包括递归），这个深度应该完全够用了。但如果是建立过多线程导致的内存溢出，在不能减少线程数或者更换64位虚拟机的情况下，通过减少
最大堆和减少栈容量来换取更多的线程。如果没有这方面的经验，这种通过减少内存来解决内存溢出的方式会比较难以想到。『不确认』

2.4.3 方法区和运行时常量池溢出
	由于运行时常量池是方法区的一部分，因此这两个区域的溢出测试就放在一起进行。String.intern()是一个Native方法，它的作用是：如果
字符串，则返回代表池中这个字符串的String对象；否则将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。1.6之前
的版本中，由于常量池分配在永久代内，我们可以通过-XX:PermSize和-XX:MaxPermSize限制方法区大小，从而间接限制其中常量池的容量。运行
时常量池溢出，在OutOfMemoryError后面跟随的提示信息是“PermGen space”，说明运行时常量池属于方法区（HotSpot虚拟机中的永久代）的
一部分。	而使用JDk1.7则不会得到相同的结果，while循环将一直进行下去。由于这个字符串常量池的实现问题，还可以引申出一个更有意思的影响。
	E2_4_2_3_2_RuntimeConstantPoolOOM例子中，在JDK1.6下运行会得到两个false，而1.7下运行则是一个true与1个false。差异原因是：
1.6中intern()方法会把首次遇到的字符串实例复制到永久代中，返回的也是永久代这个字符串实例的引用。而String创建的字符串实例在Java堆上，
所以必然不是一个引用，必将返回false。而在1.7上的intern()方法实现不会再复制实例，只是在常量池中记录首次出现的实例引用，因此intern()
返回的引用和由String创建的那个字符串实例是同一个。对str2比较返回false是因为“java”这个字符串之前已经出现过了，字符串常量池中已经
有它的引用了，不符合“首次出现”的原则，而“计算机软件”这个字符串则是首次出现的，因此返回true。
	方法区用于存放Class的相关信息，如类名，访问修饰符，常量池，字段描述，方法描述等。对于这些区域的测试，基本的思路是运行时产生
大量的类去填满方法区，直到溢出。方法区溢出也是一种常见的内存溢出异常，一个类药被垃圾收集器回收掉，判定条件是比较苛刻的。在经常
动态生成大量Class的应用中，需要特别注意类的回收状况。这类场景除了上面提到的程序使用cglib字节码增强和动态语言之外,常见的还有:
大量jsp或动态产生jsp文件的应用。

2.4.4 本机直接内存溢出
	DirectMemory容量可通过-XX:MaxDirectMemorySize指定,如果不指定,则默认与Java堆最大值（-Xmx指定）一样，直接通过反射获取Unsafe
实例进行内存分配（Unsafe类的getUnsafe()方法限制了只有引导类加载器才会返回实例，也就是设计者希望只有rt.jar中的类才能使用Unsafe
的功能）。因为，虽然使用DirectByteBuffer分配内存也会抛出内存溢出异常，但它抛出异常时并没有真正向操作系统申请分配内存，而是通过
计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是Unsafe.allocateMemory()。由DirectMemory导致的内存溢出，一个明显
的特征是在Heap Dump文件中不会看见明显的异常，如果读者发现OOM『内存溢出』之后Dump文件很小，而程序中又直接或间接使用NIO，那就可以
考虑检查一下是不是这方面的原因。