	第二章介绍了Java内存运行时区域的各个部分，其中程序计数器，虚拟机栈和本地方法栈三个区域随线程而生，随线程而灭：栈中的栈帧随着
方法的进入和退出有条不紊地执行这出栈和入栈操作。每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的（尽管在运行期会由JIT
编译器进行一些优化，但在本章基于概念模型的讨论中，大体上可以认为是编译期可知的），因此这几个区域的内存分配和回收都具备确定性，在
这几个区域内就不需要过多考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟随着回收了。而Java堆和方法区则不一样了，一个接口
中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间时才能知道会创建哪些对
象，这本份内存的分配和回收都是动态的，垃圾收集器所关注的是这部分内存，后续讨论的“内存”分配与回收也仅指这一部分内存。