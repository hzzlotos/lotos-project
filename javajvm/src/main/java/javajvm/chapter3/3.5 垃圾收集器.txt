3.5 垃圾收集器
	如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。Java虚拟机规范中对垃圾收集器应该如何实现并没有任何
规定，因此不同的厂商，不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并一般都会提供参数供用户根据自己的应用特点和要求组合
出各个年代所使用的收集器。这里讨论的收集器基于JDK1.7Update14之后的HotSpot虚拟机（此版本中正式提供了商用G1收集器）。
	图3_5展示了7种作用于不同分代的收集器， 如果两个收集器之间存在连线，就说明他们可以搭配使用。虚拟机所处区域则表示它是属于新生代
收集器还是老年代收集器。重点分析CMS和G1这两个相对复杂的收集器。首先明确一个观点：没有所谓的最好的收集器！

3.5.1 Serial收集器
	Serial收集器是最基本，发展史最悠久的收集器，这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个
CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有工作线程直到收集结束。“Stop The World”这个
名字也许听起来很酷，但这项工作实际上是由虚拟机在后台自动发起和自动完成的，在用户不可见的情况下把用户正常工作的线程全部停掉，这对
很多应用来说是难以接受的。试想一下计算机每运行一小时就要暂停相应5分钟！
	对于“Stop The World”带给用户的不良体验，虚拟机的设计者们表示完全理解，但也表示非常委屈：“你妈妈在给你打扫房间的时候，肯定也
会让你老老实实地在椅子上或者房间外带着，如果她一边打扫，你一边乱人纸屑，这房间还能打扫完？”这确实是一个合情合理的矛盾，虽然垃圾
收集这项工作听起来和打扫房间属于一个性质的，但实际上肯定还要比打扫房间负责的多！从JDK1.3开始，一直到现在最新的JDK1.7，HotSpot
虚拟机开发团队为消除或者减少工作线程因内存回收而导致停顿的努力一直进行着，从Serial收集器到Parallel收集器，再到Concurrent Mark
Sweep（CMS）乃至GC收集器的最前沿成功Garbage First（G1）收集器，我们看到了一个个越来越优秀（也越来越复杂）的收集器的出现，用户
线程的停顿时间在不断缩短，但是仍然没有办法去完全消除。寻找更优秀的垃圾收集器的工作仍在继续！比起其他收集器的地方：简单而高效（与
其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集
效率。在用户的桌面应用场景中，分配给虚拟机管理的内存一般不会很大，收集几十兆甚至一两百兆的新生代，停顿时间完全可以控制在几十毫秒
最多一百多毫秒以内，只要不是频繁发生，这点停顿可以接受的。所以Serial收集器对于运行在Client模式下的虚拟机来说是一个很好的选择。

3.5.2 ParNew收集器
	ParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数，
收集算法，Stop The World，对象分配规则，回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。ParNew
收集器除了多线程收集之外，其他与Serial收集器相比并没有太多创新之处，但它却是许多运行在Server模式下的虚拟机中首选的新生代收集器，
其中有一个与性能无关但很重要的原因是，除了Serial收集器外，目前只有它能与CMS收集器配合工作。ParNew收集器在单CPU的环境中绝对不会
比Serial收集器效果更好。甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分百保证超越Serial收集
器。当然，随着可以使用CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。默认开启的收集线程数与CPU的数量相同，在CPU非常
多的环境下，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。

3.5.3 Parallel Scavenge收集器
	Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器。Parallel Scavenge收集器目标
则是达到一个可控制的吞吐量。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间/（运行用户
代码时间+垃圾收集时间）；例如虚拟机总共运行100分钟，其中垃圾收集花费1分钟，那么吞吐量就是99%。停顿时间越短就越适合需要与用户交互
的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多
交互的任务。但Parallel Scavenge收集器与CMS收集器无法配合。
	Parallel Scavenge收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的-XX:MaxGCPauseMillis参数以及直接
设置吞吐量大小的-XX:GCTimeRatio参数。MaxGCPauseMillis参数允许的值是一个大于0的毫秒数，收集器将尽可能地保证内存回收花费的时间不
超过设定值。不过大家不要认为如果把这个参数值设置稍小点就能使得系统的垃圾收集速度变得更快，GC停顿时间缩短是以牺牲吞吐量和新生代
空间来换取的：系统把新生代调小一些，收集300MB新生代肯定比收集500MB快些，这也直接导致垃圾收集发生更频繁一些，原来10秒收集一次，
每秒停顿100毫秒，现在变成5秒收集一次，每次停顿70毫秒。停顿时间的确下降，但吞吐量也降下来了。GCTimeRatio参数的值应当是一个大于0
且小于100的整数，也就是垃圾收集时间占总时间的比率，相当于是吞吐量的倒数。如果把此参数设置为19，那允许的最大的GC时间占总时间的5%
（即1/(1+19)），默认值为99，就是允许最大1%（即1/(1+99)）的垃圾收集时间。由于与吞吐量关系密切，Parallel Scavenge收集器也被称之
为“吞吐量优先”收集器。除上述两个参数之外，Parallel Scavenge收集器还有一个参数-XX:UseAdptiveSizePolicy值得关注。这是一个开关参
数，当这个参数打开之后，就不需要手工指定新生代的大小（-Xmn），Eden与Survivor区的比例（-XX:SurvivorRatio），晋升老年代对象年龄
（-XX:PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿
时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略。如果读者对于收集器运作原理不太了解，手工优化存在困难的时候，使用Parallel
 Scavenge收集器配合自适应调节策略，把内存管理的调优任务交给虚拟机去完成将是一个不错的选择。只需要把基本的内存数据设置好（如-Xmx
设置最大堆），然后使用MaxGCPauseMillis参数（更关注最大停顿时间）或GCTimeRatio（更关注吞吐量）参数给虚拟机设立一个优化目标，那
具体细节参数的调节工作就由虚拟机完成了。自适应策略是Parallel Scavenge收集器的特性。

3.5.4 Serial Old收集器
	Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用“标记-整理”算法。这个收集器的主要意义也是在于给Client
模式下的虚拟机使用。如果在Server模式下，那么它主要还有两大用途：以是在jdk1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，
另一种用途就是作为CMS收集器的后备预案，在并发收集发生时使用。

3.5.5 Parallel Old收集器
	Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。这个收集器是在JDK1.6中才开始提供，此前新生
代的Parallel Scavenge收集器一直处于尴尬状态，因为如果新生代选择Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择。
由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，
由于单线程老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这个组合的吞吐量甚至还不ParNew加
CMS组合给力。直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了名副其实的应用组合，在注重吞吐量以及CPU资源敏感的场合，可以
考虑Parallel Scavenge加Parallel Old收集器。

3.5.6 CMS收集器
	CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S
系统的服务端上，这类应用尤其重视服务的相应的速度，希望系统停顿时间最短，以给用户带来较好的体验，CMS收集器就非常符合这类应用的需求。
从名字上就可以看出CMS收集器是基于“标记-清除”算法实现的。运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤，包括：
*初始标记（CMS initial mark）
*并发标记（CMS Concurrent mark）
*重新标记（CMS remark）
*并发清除（CMS Concurrent sweep）
其中，初始标记，重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发
标记就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的
标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。由于整个过程中耗时最长的并发标记和并发清除过程
收集器线程都可以和用户线程一起工作，所以从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。CMS优点：并发收集，
低停顿，被称之为并发低停顿收集器。但也有三个明显缺点：
*1. CMS收集器对CPU资源非常敏感。其实，面向并发设计的程序都对CPu资源比较敏感。在并发阶段，虽不会导致用户线程停顿，但会因为占用一
部分线程（或说CPU资源）而导致应用程序变慢，总吞吐量会降低。CMS默认启动的回收线程数是（CPU数量+3）/4，也就是CPU在4个以上的时，并
发收回时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，CMS对用户程序的影响就可以变
得很大，如果本来CPU负载就比较大，还要分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了50%，其实也让人无
法接受。为了应付这种情况，虚拟机提供了一种称为“增量式并发收集器”（i-CMS）的CMS收集器变种，目前已被声明为“deprecated”不再提倡使用。
*2. CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。
由于CMS并发清理阶段用户线程还在运行着,伴随程序运行自然就还会有新的垃圾不断产生,这一部分垃圾出现在标记过程之后,CMS无法在当次收集
中处理掉他们,只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。
也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到
老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。在JDK1.5的默认设置下，CMS收集器当老年代使用了
68%的空间后就被激活，这是一个偏保守的设置，如果在应用中老年代增长不是太快，可以适当调高参数-XX:CMSInitiatingOccupancyFraction
的值来提高触发百分比，以便降低内存回收次数从而获取更好的性能，在JDK1.6中，CMS收集器的启动阀值已经提升至92%。要是CMS运行期间预留
的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这是虚拟机将启动后被预案：临时启用Serial Old收集器来重新进行
老年代的垃圾收集，这样停顿时间就很长了，所以说参数-XX:CMSInitiatingOccupancyFraction设置得太高很容易导致大量“Concurrent Mode
 Failure”失败，性能反而降低。
*3. 还有最后一个缺点就是CMS是一款基于“标记-清除”算法实现的收集器，意味着收集结束时会有大量空间碎片产生。碎片过多时，将会给大对象
分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，从而不得不出发一次Full GC。为了
解决这个问题，CMS收集器提供了一个-XX:+UseCMSCompactAtFullCollection开关参数（默认就是开启的），用于在CMS收集器顶不住要进行Full
 GC时开启内存碎片的合并整理过程，内存整理的过程是无法并发的，空间碎片问题没有了，但停顿时间不得不变长。虚拟机设计者还提供了另外
一个参数-XX:CMSFullBeforeCompaction，这个参数是用于设置执行多少次不压缩的Full GC后，跟着来一次带压缩的（默认值为0，表示每次进入
Full GC时都进行碎片整理）。

3.5.7 G1收集器
	G1（Garbage-First）是一款面向服务端应用的垃圾收集器，HotSpot期望未来可以替换掉CMS收集器。如下特点：
*1. 并行与并发：G1能充分利用多CPU，多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop The World停顿时间，部分其他收
集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。
*2. 空间整合：与CMS的“标记-清理”算法不同，G1从整体来看是基于“标记-整理”算法实现的收集器，从局部上来看是基于“复制”算法实现的，但
如论如何，这两种算法都意味着G1运行期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象
时不会因为无法找到连续内存空间而提前出发下一次GC。
*2. 可预测的停顿：这是G1相对于CMS的另一大优势，减低停顿时间是G1和CMS共同的关注点，但G1除了追求体低停顿外，还能建立可预测的停顿
时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的
垃圾收集器的特征了。
在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代。而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大
差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，
他们都是一部分Region（不需要连续）的集合。
	G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划的避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面
的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价
值最大的Region。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。
	G1把内存“化整为零”的思路，理解起来似乎很容易，但其中的实现具体细节却远远没有想象中那样简单，以一个细节为例：将Java堆分为多个
Region后，垃圾收集是否就真的能以Region为单位进行了？听起来顺理成章，仔细一想，Region不可能是孤立的。一个对象分配在某个Region中，
它并非只能被本Region中的其他对象引用，而是可以与整个Java堆任意的对象发生引用关系。那在做可达性判定确定对象是否存活的时候，还是需
要扫描整个Java堆来确保准确性。在以前的分代收集中，新生代中对象回收也面临同样问题，如果回收新生代时不得不同时扫描老年代的话，那么
Minor GC效率可能下降不少。
	在G1收集器中，Region之间的对象引用以及其他收集器中的新生代和老年代之间的对象引用，虚拟机都是使用Remembered Set来避免全堆扫
描的。G1中每个Region都有一个与之对应的Remembered Set，虚拟机发现程序在对Reference类型的数据进行写操作时，会产生一个Write Barrier
暂时中断写操作，检查Reference引用的对象是否处于不同的Region之中（在分代的例子中就是检查是否老年代中的对象引用了新生代中的对象），
如果是，便通过CardTable把相关引用信息记录到被引用对象所属的Region的Remembered Set之中。当进行内存回收时，在GC根节点的枚举范围中
加入Remembered Set即可保证不对全堆扫描也不会有遗漏。如果不计算维护Remembered Set的操作，G1收集器的运作大致可划分为以下几个步骤：
*初始标记（Initial Marking）
*并发标记（Concurrent Marking）
*最终标记（Final Marking）
*筛选回收（Live Data Counting and Evacuation）
初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，
能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活
的对象，这阶段耗时较长，但可与用户程序并发执行。而最终标记阶段则是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那
一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到
Remembered Set中，这阶段需要停顿线程，但是可并行执行回收线程。最后在筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据
用户所期望的GC停顿时间来制定回收计划，从Sun公司透露出来的信息来看，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收
一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。
	由于目前G1成熟版本发布时间较短，G1收集器几乎可以说还没有经过实际应用的考验，仅仅通过简单的Java代码写个Microbenchmark程序来
创建，移除Java对象，再用-XX:+PrintGCDetails等参数来查看GC日志是很难做到准确衡量其性能的。建议是虽然G1与CMS都立足与低停顿时间，
但ParNew+CMS仍可以作为首选方案。
------------------------------------------------------------------------------------------------------------------------
*串行收集器：
1.DefNew：是使用-XX:+UseSerialGC（新生代，老年代都使用串行回收收集器）。
*并行收集器：
1.ParNew：是使用-XX:+UseParNewGC（新生代使用并行收集器，老年代使用串行回收收集器）或者-XX:+UseConcMarkSweepGC(新生代使用并行
收集器，老年代使用CMS)。
2.PSYoungGen：是使用-XX:+UseParallelOldGC（新生代，老年代都使用并行回收收集器）或者-XX:+UseParallelGC（新生代使用并行回收收集
器，老年代使用串行收集器）。
3.garbage-first heap：是使用-XX:+UseG1GC（G1收集器）
------------------------------------------------------------------------------------------------------------------------

3.5.8 理解GC日志
	每一种收集器的日志形式都是由他们自身的实现所决定的，换而言之，每个收集器的日志格式都可以不一样。但虚拟机设计者为了方便用户阅
读，将各个收集器的日志都维持一定的共性，例如以下两段典型的GC日志：（图3_5_8_1）
	最前面的数字“33.125：”与“100.667：”代表了GC发生的时间，这个数字的含义是从Java虚拟机启动以来经过的描述。GC日志开头的“[GC”和
“[Full GC”说明了这次垃圾收集的停顿类型，而不是用来区分新生代GC还是老年代GC的。如果有“Full”，说明这次GC是发生了Stop The World的，
如（图3_5_8_2）这段新生代收集器ParNew的日志也会出现“[Full GC”（这一边是因为出现了分配担保失败之类的问题，所以才导致STW）。如果
是调用System.gc()方法所触发的收集，那么在这里将显示“[Full GC(System)”。
	接下来的“[DefNew”，“[Tenured”，“[Perm”表示GC发生的区域，这里显示的区域名称与使用的GC收集器是密切相关的，例如上面样例所使用
的Serial收集器中的新生代名为“Default New Generation”，所以显示的是“[DefNew”。如果是ParNew收集器，新生代名称就会变成“[ParNew”，
意为“Parallel New Generation”。如果采用Parallel Scavenge收集器，那它配套的新生代称为“PSYoungGen”，老年代和永久代同理，名称也
是由收集器决定的。
	后面方括号内部的“3324K->152K(3712K)”含义是“GC前该内存区域已使用量->GC后该内存区域已使用容量（该内存区域总容量）”。而在方括
号之外的“3324K->152K(11904K)”表示“GC前Java堆已使用容量->GC后Java堆已使用容量（Java堆总容量）”。
	再往后，“0.0025925secs”表示该内存区域GC所占用的时间，单位是秒。有的收集器会给出更具体的时间数据，如“[Times: user=0.01 sys
=0.00,real=0.02secs]”，这里面的user，sys和real与Linux的time命令所输出的时间含义一致，分别代表用户态消耗的CPU时间，内核态消耗的
CPU时间和操作从开始到结束所经过的墙钟时间（Wall Clock Time）。CPU时间与墙钟时间的区别是，墙钟时间包括各种非运算的等待耗时，例如
等待磁盘I/O，等待线程阻塞，而CPU时间不包括这些耗时，但当系统有多CPU或者多核的话，多线程操作会叠加这些CPU时间，所以读者看见user或
sys时间超过real时间是完全正常的。

3.5.9 垃圾收集器参数总结（如图）