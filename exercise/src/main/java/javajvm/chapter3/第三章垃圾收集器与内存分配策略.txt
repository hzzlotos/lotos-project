	第二章介绍了Java内存运行时区域的各个部分，其中程序计数器，虚拟机栈和本地方法栈三个区域随线程而生，随线程而灭：栈中的栈帧随着
方法的进入和退出有条不紊地执行这出栈和入栈操作。每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的（尽管在运行期会由JIT
编译器进行一些优化，但在本章基于概念模型的讨论中，大体上可以认为是编译期可知的），因此这几个区域的内存分配和回收都具备确定性，在
这几个区域内就不需要过多考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟随着回收了。而Java堆和方法区则不一样了，一个接口
中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间时才能知道会创建哪些对象，
这本份内存的分配和回收都是动态的，垃圾收集器所关注的是这部分内存，后续讨论的“内存”分配与回收也仅指这一部分内存。
	
3.2 对象已死吗
	在堆里面存放这Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还“存活”着，哪些
已经“死去”（即不可能再被任何途径使用的对象）。

3.2.1 引用计数算法
	很多教科书判断对象存活的算法是：给对象中添加一个引用计数器，每当有地方引用，计数器+1；失效时计数器-1；任何时刻计数器为0的对象
就是不可能再被使用的。客观说引用计数算法实现简单，判定效率也很高，大部分情况下是不错的算法，而它很难解决对象之间相互循环引用的问题。
由E3_2_1_ReferenceCountingGC的gc.log可以清楚看到，GC日志中包含（XXXK->XXK），意味着虚拟机并没有因为两个对象相互引用就不回收他们，
侧面说明虚拟机不是通过引用算法来判断对象存活的。

3.2.2可达性分析算法
	这套算法的基本思路就是通过一系列成为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个
对象到GC Roots没有任何引用链相连（用图论的话来说，就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。
在Java语言中，可作为GC Roots的对象包括下面几种：
*虚拟机栈中引用的对象。
*方法区中类静态属性引用的对象。
*方法区中常量引用的对象。
*本地方法栈中JNI（即一般说的Native方法）引用的对象。

3.2.3 再谈引用
	无论什么算法判定对象是否存活都与“引用”有关。引用的概念现在被分为了“强引用”，“软引用”，“弱引用”，“虚引用”4中，这4种引用强度
一次逐渐减弱。
*强引用就是指在程序代码之中普遍存在的，类似“Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被
引用的对象。
*软引用是用来描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围
之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。现有SoftReference类来实现软引用。
*弱引用也是用来描述非必需对象的，但它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作
时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。现有WeakReference类来实现弱引用。
*虚引用也成为幽灵引用或幻影引用，他是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过
虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时受到一个系统通知。现有PhantomReference
类来实现虚引用。

3.2.4 生存还是死亡
	即使在可达性算法中不可达的对象也并非“非死不可”，这时候他们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少经历两次标记过程：
如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并进行一次筛选，筛选条件是此对象是否有必要执行
finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。
	如果这个对象被判定为有必要执行finalize()放啊，那么这个对象将会放置在一个叫做F-Queue队列之中，并在稍后由一个由虚拟机自动建立
的，低优先级的Finalizer线程去执行它。这里所谓的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是如果一个
对象在finalize()方法中执行缓慢，或者发生了死循环，将很可能会导致F-Queue队列中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。
finalize()方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功
挽救自己---只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或者对象的成员变量，那在第二次
标记时它将被移除出“即将回收”集合；如果对象这时还未逃脱，那基本上它就真的被回收了。从E3_2_4_FinalizeEscapeGC可以看出事例中的
finalize()方法确实被GC收集器触发过，并收集前成功太拖了。另一个值得注意的地方是finalize()方法只会被系统自动调用一次，如果面临
下一次回收，它的finalize()方法不会再次执行。
	需要特别说明的是，不要使用finalize()方法来挽救对象；相反，大家应该尽量避免使用它，因为它不是C/C++中的析构函数，而是Java刚
诞生时，为了使C/C++程序员更容易接受所做出的一个妥协。运行代价高昂，不确定性大，无法保证各个对象的调用顺序。建议忘记这个方法。

3.2.5 回收方法区
	很多人认为方法区（或者HotSpot虚拟机中的永久代）是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机在方法区实现垃圾
收集，而且在方法区中进行垃圾收集的“性价比”较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%～95%的空间，
而永久代的垃圾收集效率远低于此。永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量和回收Java堆中的对象非常类似。
以常量池中字面量的回收为例，加入一个字符串“abc”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做“abc”的，换句话说，
就是没有任何String对象引用常量池中的“adc”常量，也没有其他地方引用了这个字面量，如果这时候发生了内存回收，而且必要的话，这个“adc”
常量就会被系统清理出常量池。常量池中的其他类（接口），方法，字段的符号引用也与此类似。判定一个常量是否是“废弃常量”比较简单，而要
判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足以下三个条件才能算是“无用的类”：
*该类所有的实例都已经被回收,也就是Java堆中不存在该类的任何实例。
*加载该类的ClassLoader已经被回收。
*该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。
虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样，不使用了就必然会回收。是否对类进行回收，
HotSpot虚拟机提供了-Xnoclassgc参数进行控制，还可以使用-verbose:class以及-XX:+TraceClassLoading，-XX:+TraceClassUnLoading查看
类加载和卸载信息，其中-verbose:class和-XX:TraceClassLoading可以在Product版的虚拟机中使用，-XX:+TraceClassUnLoading参数需要
FastBebug版的虚拟机支持。
	在大量使用反射，动态代理，CGLib等ByteCode框架，动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的
的功能，以保证永久代不会溢出。

3.3 垃圾收集算法
	由于垃圾收集算法的实现设计大量的程序细节，而且个个平台的虚拟机操作内存的方法又各不相同，因此本节不过多讨论算法的实现，只是介绍
几种算法的思想及其发展过程。

3.3.1 标记-清楚算法
	最基础的收集算法是“标记-清除”算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成
后统一回收所有被标记的对象，它的标记过程其实在前一节讲述对象标记判定时已经介绍过了。之所有说它是最基础的收集算法，是因为后续的收集
算法都是基于这种思路并对其不足进行改进而得到的。它的主要不足有两个：一个是效率问题，标记和清除两个过程效率都不太高；另一个是空间
问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存
而不得不提前触发另一次垃圾收集动作。

3.3.2 复制算法
	为了解决效率问题，一种称为“复制”的收集算法出现了，




